var tipuesearch = {"pages": [{'title': 'About', 'text': 'Repo:  https://github.com/mdecycu/cp2025 \n Web:  https://mde.tw/cp2025 \n 可攜程式套件: \n portable_wcm2025_w10.7z \n 課程內容: \n 主要是 Python, 其次為 Javascript 程式語法的應用. \n 分散式版次管理系統使用 Git 與 Github. \n 課程評分: \n 課程參與 (30%)  - MS Teams 線上參與, 每週填具心得表單 \n 個人與分組網站維護 (30%)  - 每週至少兩次推送與課程進度相關的學習內容與心得 \n 期末簡報 (40%)  - 個人學習心得簡報 \n 行事曆 \n 1a 上課時段: 每週三 13:20 - 16:10 \n 1b 上課時段: 每週四 09:10 - 12:00 (w17 1/1 放假) \n  全頁檢視  \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Topics', 'text': '', 'tags': '', 'url': 'Topics.html'}, {'title': 'Git', 'text': '為何計算機程式要使用 Git 與 Github? \n 計算機程式（軟體開發）使用 Git 與 GitHub 主要有以下幾個原因： \n \n 版本控制: Git 是一套分散式的版本控制系統，能記錄每一個檔案的修改歷程。這樣就算不小心改壞了，也能隨時回復到以前的版本，追蹤誰改了什麼、什麼時候改的。 \n 團隊協作:\xa0多個開發者可以同時對同一個專案進行開發，透過分支（branch）機制，各自開發新功能、修 bug，最後再合併（merge）到主分支，避免互相覆蓋程式碼。 \n 雲端備份與分享:\xa0GitHub 是基於 Git 的雲端代管平台，可以將本地的 Git 專案上傳到雲端，不怕資料遺失。也方便將程式碼公開或私下分享給其他人。 \n 問題追蹤與管理:\xa0GitHub 除了儲存程式碼，還提供 issue、pull request 等工具，有助於追蹤 bug、討論功能、審查程式碼，提高專案管理效率。 \n 開放原始碼與社群合作:\xa0許多開放原始碼專案都放在 GitHub，任何人都能貢獻程式碼，促進社群協作與學習。 \n 總結：使用 Git 和 GitHub 可以讓程式開發更有組織、更安全、更容易協作與管理，也方便與他人分享、學習與成長。 \n \n 請舉實際的計算機程式案例，說明如何操作 Git 與 Github，以便取得程式開發流程的便利與優勢。 \n Git 與 GitHub 操作案例說明 \n Git 與 GitHub 實際操作案例：多人開發 ToDo List 網站 \n \n 1. 專案初始化與上傳 \n \n 步驟： \n \n 在本機建立專案資料夾，初始化 Git：\n git init \n \n 新增檔案（如  index.html 、 app.js ），並提交第一個版本：\n git add . git commit -m "Initial commit" \n \n 在 GitHub 建立新 repository，然後將本機專案推送到遠端：\n git remote add origin https://github.com/username/todo-app.git git push -u origin master \n \n \n 優勢：  所有程式碼都有歷史紀錄，且安全備份於雲端。 \n \n \n \n 2. 分支開發新功能 \n \n 情境： 小明負責開發「新增待辦事項」功能。 \n 步驟： \n \n 建立新分支：\n git checkout -b feature/add-todo-item \n \n 實作功能並提交：\n git add . git commit -m "Add feature to create todo item" \n \n 推送分支到 GitHub：\n git push origin feature/add-todo-item \n \n \n 優勢：  各自分支開發，互不干擾，降低衝突風險。 \n \n \n \n 3. Pull Request（合併請求）與 Code Review \n \n 情境： 小明開發完成，欲合併新功能到主分支。 \n 步驟： \n \n 在 GitHub 上建立 Pull Request，描述功能內容。 \n 其他團隊成員審查程式碼，提出建議或修正。 \n 經討論無誤後，管理員合併 PR。 \n \n 優勢：  強化程式品質與團隊溝通，每次合併都有討論紀錄。 \n \n \n \n 4. 處理 Bug 與 Issue 追蹤 \n \n 情境： 使用者發現「無法刪除待辦事項」的 bug。 \n 步驟： \n \n 在 GitHub issue 區提出 bug 報告。 \n 團隊分配成員修正，建立  fix/delete-todo-bug  分支。 \n 修正後提交、發 PR、review、合併。 \n \n 優勢：  所有 bug、功能需求有明確記錄，修正過程透明。 \n \n \n \n 5. 版本回溯與復原 \n \n 情境： 新功能導致主分支出錯。 \n 步驟： \n \n 透過 Git log 查找歷史版本：\n git log \n \n 回復到上一個穩定版本：\n git checkout <commit-id> \n \n \n 優勢：  不怕程式「改壞」，可隨時回復，輕鬆追蹤誰做了什麼修改。 \n \n \n \n 總結 \n Git 與 GitHub 提供完整的版本控制、團隊協作、問題追蹤、程式碼審查與備份機制，讓開發流程更有條理，大幅提升開發效率與品質。不論團隊或個人開發，都能享有回溯、備份、管理等多重好處。 \n', 'tags': '', 'url': 'Git.html'}, {'title': 'Git_ex1', 'text': 'Reeborg 機器人 Python 開發流程與 Git/GitHub 協作範例 \n 階段一：基礎 Python 與 Reeborg 指令 \n 初學者可直接用 Python 撰寫簡單的  Reeborg 機器人程式 ，例如讓機器人向前走數步、左轉、撿物件： \n move()\nmove()\nturn_left()\nmove()\nif object_here():\n    take() \n 階段二：加入函式與三人協同開發 \n 協作情境： 三位組員（A、B、C）各自開發一段行走任務，然後將重複動作寫成函式，合併到專案。 \n \n 組員 A:  讓機器人前進 3 格\n for i in range(3):\n    move()\n       \n \n 組員 B:  機器人轉 2 次左\n for i in range(2):\n    turn_left()\n       \n \n 組員 C:  機器人檢查物件並撿取\n if object_here():\n    take()\n       \n \n \n 協作流程： 三人各自建立分支（feature/A, feature/B, feature/C），在 GitHub 上合併 Pull Request，最後由主分支整合。 \n 加入共用函式 \n def turn(times):\n    for i in range(times):\n        turn_left()\n\ndef new_move(steps):\n    for i in range(steps):\n        move()\n   \n 階段三：重構與加入迴圈、條件與函式應用 \n 將重複採收動作寫成  harvest_one_row()  函式，結合前進與轉彎，流程更清晰。 \n def harvest_one_row():\n    while object_here():\n        take()\n    else:\n        move() \n 階段四：導入 class，建立泛用 Reeborg 機器人控制架構 \n class ReeborgBot:\n    def turn(self, times):\n        for i in range(times):\n            turn_left()\n    def move_steps(self, steps):\n        for i in range(steps):\n            move()\n    def harvest_one_row(self):\n        while object_here():\n            take()\n        else:\n            move()\n    def harvest_field(self, rows, row_length):\n        for i in range(rows):\n            for j in range(row_length):\n                self.harvest_one_row()\n            if i != rows - 1:\n                self.turn(3)\n                self.move_steps(1)\n                self.turn(3)\n                self.move_steps(1)\n\n# 使用範例\nbot = ReeborgBot()\nbot.move_steps(2)\nturn_left()\nbot.move_steps(2)\nbot.harvest_field(3, 6)\n   \n 協作開發流程與 Git/GitHub 應用摘要 \n \n 使用  git init  建立本地專案。 \n 三位組員各自建立分支（如 feature/A），開發專屬功能。 \n 透過  git add 、 git commit 、 git push  上傳到 GitHub。 \n 在 GitHub 建立 Pull Request，進行 code review 與合併。 \n 遇重複邏輯，抽象為函式，逐步重構與優化。 \n 最後導入 class，建立泛用控制架構，提升可維護性與擴充性。 \n \n 結語 \n 本例展示 Python 基礎語法、函式、類別應用，以及如何善用 Git/GitHub 進行協同開發，讓團隊程式碼更有架構、易於管理與擴展。', 'tags': '', 'url': 'Git_ex1.html'}, {'title': 'Git_ex2', 'text': '三人協同開發 Reeborg 程式：Git/GitHub 詳細流程與指令 \n 專案開發分工 \n \n \n \n 組員 \n 負責內容 \n Git 分支名稱 \n \n \n Alice \n 基本移動與轉向（ new_move 、 turn 、 turn_right ） \n feature/move-turn \n \n \n Bob \n 收成邏輯（ harvest_one_row 、 object_taken ） \n feature/harvest \n \n \n Carol \n 方向判斷與主流程（ is_facing_east 、主執行流程） \n feature/main-loop \n \n \n \n Step 1：建立 GitHub 專案並初始化 \n \n 任務： 由一位組員（如 Alice）在 GitHub 新建 repo（如  reeborg-harvest ）。 \n 本地初始化： \n git clone https://github.com/your-org/reeborg-harvest.git\ncd reeborg-harvest\n       \n \n 建立主分支（main）： \n git checkout -b main\ngit push -u origin main\n       \n \n 三位組員各自分出功能分支： \n git checkout -b feature/move-turn      # Alice\ngit checkout -b feature/harvest        # Bob\ngit checkout -b feature/main-loop      # Carol\n       \n \n 推送分支到遠端： \n git push -u origin feature/move-turn      # Alice\ngit push -u origin feature/harvest        # Bob\ngit push -u origin feature/main-loop      # Carol\n       \n \n \n Step 2：組員各自開發（分支作業） \n \n 組員在各自分支中開發： \n # 編輯程式檔案（如 reeborg.py）\n# 開發完成後，確保功能可運作\n\ngit add reeborg.py\ngit commit -m "實作 new_move, turn, turn_right 函式"      # Alice\ngit commit -m "實作 harvest_one_row 與 object_taken 邏輯"  # Bob\ngit commit -m "實作 is_facing_east 與主流程"               # Carol\n       \n \n 將更動推上 GitHub： \n git push                                 # 各自分支\n       \n \n \n Step 3：建立 Pull Request（PR）並 Code Review \n \n 組員在 GitHub 建立 PR，從 feature 分支合併至 main： \n \n 標題範例：「[feature/move-turn] 新增移動與轉向函式」 \n 描述本次更動內容，標註需審查組員。 \n \n \n 其他組員 Review 程式碼： \n \n 檢查有無語法錯誤、重複邏輯、註解清楚。 \n 提出建議，必要時請作者修正再 push。 \n \n \n 審查通過後合併 PR： \n \n 管理員或 PR 作者可點選「Merge pull request」。 \n \n \n main 分支同步至本地： \n git checkout main\ngit pull\n       \n \n \n Step 4：整合程式範例 \n def turn(n):\n    for i in range(n):\n        turn_left()\n        \ndef turn_right():\n    for i in range(3):\n        turn_left()\n        \ndef new_move(n):\n    for i in range(n):\n        move()\n        \ndef harvest_one_row():\n    global object_taken\n    while object_here() and object_taken < 36:\n        take()\n        object_taken += 1\n    # 只要沒達到 36 就繼續 move\n    if object_taken < 36:\n        move()\n        \ndef is_facing_east():\n    # 記錄原本面向的方向\n    count = 0\n    while not is_facing_north():\n        turn_left()\n        count += 1\n        if count == 4:\n            break\n    # 轉到北方後，左轉三次就會面向東\n    turn(3)\n    return True\n\nobject_taken = 0\n# move to the field\nnew_move(2)\nturn_left()\nnew_move(2)\n\ndone = False\nwhile is_facing_east() and not done:\n    for i in range(2):\n        # 面向東直走收成\n        for j in range(6):\n            harvest_one_row()\n            if object_taken >= 36:\n                done = True\n                break\n        if done:\n            break\n        for k in range(2):\n            turn_left()\n            move()\n        # 面向西直走收成\n        for j in range(6):\n            harvest_one_row()\n            if object_taken >= 36:\n                done = True\n                break\n        if done:\n            break\n        for k in range(2):\n            turn_right()\n            move()\n    if object_taken >= 36:\n        print("task completed!")\n        break \n Step 5：後續協作建議 \n \n 每次開發新功能或修 bug，請先拉新分支，避免直接在 main 分支作業。 \n 合併前先  git pull origin main ，解決衝突後再 push。 \n 務必在 PR 中詳細描述修改內容與測試方式，方便審查。 \n 善用  git log 、 git status 、 git diff  檢查歷史與更動。 \n \n 常用 Git 指令說明 \n \n git checkout -b 分支名 ：從目前分支新建並切換到分支 \n git add 檔名 ：加入暫存區，準備提交 \n git commit -m "訊息" ：提交更動，寫下本次修改說明 \n git push -u origin 分支名 ：推送分支到遠端 \n git pull ：拉下遠端最新更動並合併 \n git merge 分支名 ：將指定分支合併到目前分支 \n git status ：顯示目前狀態、尚未提交的變更 \n git log ：查詢提交歷史 \n git diff ：顯示檔案內容變更差異 \n \n 結論 \n 本範例展現三人協同開發的分工、分支管理、PR 審查流程，以及 Git/GitHub 實用指令。遵循此流程能大幅提升團隊協作及程式碼品質。', 'tags': '', 'url': 'Git_ex2.html'}, {'title': 'Python', 'text': 'Learn Python with  Reeborg \n https://reeborg.ca/docs/en/ \n https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/ \n https://github.com/loukhin/Reeborg \n https://github.com/aroberge/reeborg-howto \n https://github.com/LeeRenJie/100-days-of-code-in-python \n Python code for Artificial Intelligence - Foundations of Computational Agents \n https://artint.info/AIPython/aipython.pdf \n Program AI with Python \n AI with Python \n Using Python for Artificial Intelligence \n Machine Learning with Python Tutorial \n Genetic Algorithms: \n ga_1.py  (from  https://www.geeksforgeeks.org/genetic-algorithms/ ) \n https://medium.com/analytics-vidhya/genetic-algorithm-494ac5be18bb \n https://medium.com/@LeonFedden/evolving-solutions-with-genetic-algorithms-e3122473a35f \n Apply GA to  https://github.com/mdecycu/cs101 \n', 'tags': '', 'url': 'Python.html'}, {'title': 'Javascript', 'text': '', 'tags': '', 'url': 'Javascript.html'}, {'title': 'HTML and CSS', 'text': '', 'tags': '', 'url': 'HTML and CSS.html'}, {'title': 'Reeborg', 'text': 'https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1.py \n https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1_east_west.py \xa0 \n \n https://mde.tw/reeborg \n https://github.com/mdecycu/cs101 \n https://reeborg.ca/docs/en/python/index.html \n https://aroberge.github.io/reeborg-api/ \n if using local static port 9442: \n Reeborg \n For Github Pages: \n Reeborg \n \n', 'tags': '', 'url': 'Reeborg.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}]};