var tipuesearch = {"pages": [{'title': 'About', 'text': 'Repo:  https://github.com/mdecycu/cp2025 \n Web:  https://mde.tw/cp2025 \n 可攜程式套件: \n portable_wcm2025_w10.7z \n 課程內容: \n 主要是 Python, 其次為 Javascript 程式語法的應用. \n 分散式版次管理系統使用 Git 與 Github. \n 課程評分: \n 課程參與 (30%)  - MS Teams 線上參與，6人一組 每週上台發表學習心得。 \n 個人與分組網站維護 (30%)  - 每週至少兩次推送與課程進度相關的學習內容與心得。 \n 期末簡報 (40%)  - 個人學習心得簡報。 \n 行事曆 \n 1a 上課時段: 每週三 13:20 - 16:10 \n 1b 上課時段: 每週四 09:10 - 12:00 (w17 1/1 放假) \n  全頁檢視  \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Topics', 'text': '計算機程式課程主題總覽 \n 課程簡介 \n 本課程以實作為導向，循序漸進學習  Python 、 JavaScript 、 HTML 、 CSS  等現代網頁與程式語言，最終應用於  Reeborg 機器人程式開發 。內容設計結合理論與實作，強調程式邏輯、問題解決與跨語言應用能力。 \n \n 從零基礎學習程式語言的基本結構與語法 \n 掌握網頁技術，為互動式機器人程式設計打下基礎 \n 專題實作，應用於 Reeborg’s World 機器人操作與挑戰任務 \n \n 課程主題與詳細內容 \n 1. Python 基礎與 Reeborg 機器人程式設計 \n \n Python 語言簡介：  特色、應用領域、開發環境介紹 \n 基本語法：  變數、資料型態、運算子、輸入與輸出 \n 流程控制：  條件判斷 ( if ,  elif ,  else )、迴圈 ( while ,  for ) \n 函式與模組：  函式定義與呼叫、自訂功能、模組導入 \n Reeborg’s World 操作： \n \n 基本指令 ( move() ,  turn_left() ,  take() ,  put() ) \n 感測器判斷 ( front_is_clear() ,  wall_in_front() ,  object_here() ,  at_goal() ) \n 將 Python 程式邏輯應用於控制機器人走迷宮、撿物、解任務 \n \n \n 實作練習：  關卡挑戰、流程規劃、錯誤偵錯與修正 \n \n 2. JavaScript 程式設計基礎 \n \n JavaScript 角色：  前端網頁互動語言，與 Python 差異與應用 \n 基本語法：  變數 ( let ,  const )、資料型態、運算子、輸出 ( console.log() ) \n 流程控制：  條件 ( if ,  else )、迴圈 ( for ,  while ) \n 函式與 ES6 新語法：  函式宣告、箭頭函式 ( () => {} ) \n 陣列與物件：  基本操作、方法應用 \n 與網頁互動：  認識 DOM、事件處理等（為後續進階鋪路） \n 小專題：  建立簡單計算機或互動網頁按鈕 \n \n 3. HTML 基礎 - 建構網頁內容 \n \n HTML 結構：  了解  <html> ,  <head> ,  <body>  等標籤 \n 常用標籤：   <h1>~<h6>  標題、 <p>  段落、 <a>  連結、 <img>  圖片、 <ul> / <ol>  列表、 <table>  表格 \n 表單與輸入：   <form> ,  <input> ,  <button>  等 \n 結構化分區：   <div> ,  <span> ,  <section> ,  <nav>  等 \n 專案實作：  製作個人簡歷網頁、Reeborg 世界說明頁等 \n \n 4. CSS 樣式設計 - 美化網頁版面 \n \n CSS 基本語法：  選擇器、屬性、值的語法結構 \n 常用樣式：  顏色 ( color 、 background )、字型 ( font-size 、 font-family )、邊框 ( border ), 間距 ( margin ,  padding ) \n 版面配置：   display 、 flex 、 grid  基礎 \n RWD 響應式設計：  讓你的網頁適合不同裝置 \n CSS 與 HTML 整合：  內嵌樣式、內部樣式表、外部 CSS 檔案 \n 美化 Reeborg 機器人專案網頁：  實作練習 \n \n 5. 綜合應用 - Reeborg 機器人專案開發 \n \n 專案規劃與團隊合作：  需求分析、分工合作 \n 跨語言整合：  利用 Python 控制邏輯、JavaScript 增強互動、HTML/CSS 展示結果 \n 打造專屬 Reeborg 世界：  設計自訂任務與挑戰 \n 成果展示：  發表與互評，分享學習心得 \n \n 學習建議與資源 \n \n 多加練習與嘗試，遇到困難主動討論與尋找資料 \n 推薦學習網站： Reeborg’s World 、 W3Schools 、 MDN Web Docs \n 建議每週規劃自主練習與小專案，培養實作與解決問題能力 \n 記錄學習歷程，定期回顧與修正 \n \n', 'tags': '', 'url': 'Topics.html'}, {'title': 'Git', 'text': '為何計算機程式要使用 Git 與 Github? \n 計算機程式（軟體開發）使用 Git 與 GitHub 主要有以下幾個原因： \n \n 版本控制: Git 是一套分散式的版本控制系統，能記錄每一個檔案的修改歷程。這樣就算不小心改壞了，也能隨時回復到以前的版本，追蹤誰改了什麼、什麼時候改的。 \n 團隊協作:\xa0多個開發者可以同時對同一個專案進行開發，透過分支（branch）機制，各自開發新功能、修 bug，最後再合併（merge）到主分支，避免互相覆蓋程式碼。 \n 雲端備份與分享:\xa0GitHub 是基於 Git 的雲端代管平台，可以將本地的 Git 專案上傳到雲端，不怕資料遺失。也方便將程式碼公開或私下分享給其他人。 \n 問題追蹤與管理:\xa0GitHub 除了儲存程式碼，還提供 issue、pull request 等工具，有助於追蹤 bug、討論功能、審查程式碼，提高專案管理效率。 \n 開放原始碼與社群合作:\xa0許多開放原始碼專案都放在 GitHub，任何人都能貢獻程式碼，促進社群協作與學習。 \n 總結：使用 Git 和 GitHub 可以讓程式開發更有組織、更安全、更容易協作與管理，也方便與他人分享、學習與成長。 \n \n 請舉實際的計算機程式案例，說明如何操作 Git 與 Github，以便取得程式開發流程的便利與優勢。 \n Git 與 GitHub 操作案例說明 \n Git 與 GitHub 實際操作案例：多人開發 ToDo List 網站 \n \n 1. 專案初始化與上傳 \n \n 步驟： \n \n 在本機建立專案資料夾，初始化 Git：\n git init \n \n 新增檔案（如  index.html 、 app.js ），並提交第一個版本：\n git add . git commit -m "Initial commit" \n \n 在 GitHub 建立新 repository，然後將本機專案推送到遠端：\n git remote add origin https://github.com/username/todo-app.git git push -u origin master \n \n \n 優勢：  所有程式碼都有歷史紀錄，且安全備份於雲端。 \n \n \n \n 2. 分支開發新功能 \n \n 情境： 小明負責開發「新增待辦事項」功能。 \n 步驟： \n \n 建立新分支：\n git checkout -b feature/add-todo-item \n \n 實作功能並提交：\n git add . git commit -m "Add feature to create todo item" \n \n 推送分支到 GitHub：\n git push origin feature/add-todo-item \n \n \n 優勢：  各自分支開發，互不干擾，降低衝突風險。 \n \n \n \n 3. Pull Request（合併請求）與 Code Review \n \n 情境： 小明開發完成，欲合併新功能到主分支。 \n 步驟： \n \n 在 GitHub 上建立 Pull Request，描述功能內容。 \n 其他團隊成員審查程式碼，提出建議或修正。 \n 經討論無誤後，管理員合併 PR。 \n \n 優勢：  強化程式品質與團隊溝通，每次合併都有討論紀錄。 \n \n \n \n 4. 處理 Bug 與 Issue 追蹤 \n \n 情境： 使用者發現「無法刪除待辦事項」的 bug。 \n 步驟： \n \n 在 GitHub issue 區提出 bug 報告。 \n 團隊分配成員修正，建立  fix/delete-todo-bug  分支。 \n 修正後提交、發 PR、review、合併。 \n \n 優勢：  所有 bug、功能需求有明確記錄，修正過程透明。 \n \n \n \n 5. 版本回溯與復原 \n \n 情境： 新功能導致主分支出錯。 \n 步驟： \n \n 透過 Git log 查找歷史版本：\n git log \n \n 回復到上一個穩定版本：\n git checkout <commit-id> \n \n \n 優勢：  不怕程式「改壞」，可隨時回復，輕鬆追蹤誰做了什麼修改。 \n \n \n \n 總結 \n Git 與 GitHub 提供完整的版本控制、團隊協作、問題追蹤、程式碼審查與備份機制，讓開發流程更有條理，大幅提升開發效率與品質。不論團隊或個人開發，都能享有回溯、備份、管理等多重好處。 \n', 'tags': '', 'url': 'Git.html'}, {'title': 'Git_ex1', 'text': 'Reeborg 機器人 Python 開發流程與 Git/GitHub 協作範例 \n 階段一：基礎 Python 與 Reeborg 指令 \n 初學者可直接用 Python 撰寫簡單的  Reeborg 機器人程式 ，例如讓機器人向前走數步、左轉、撿物件： \n move()\nmove()\nturn_left()\nmove()\nif object_here():\n    take()\n \n 階段二：加入函式與三人協同開發 \n 協作情境： 三位組員（A、B、C）各自開發一段行走任務，然後將重複動作寫成函式，合併到專案。 \n \n 組員 A:  讓機器人前進 3 格\n for i in range(3):\n    move()\n \n \n 組員 B:  機器人轉 2 次左\n for i in range(2):\n    turn_left()\n \n \n 組員 C:  機器人檢查物件並撿取\n if object_here():\n    take()\n \n \n \n 協作流程： 三人各自建立分支（feature/A, feature/B, feature/C），在 GitHub 上合併 Pull Request，最後由主分支整合。 \n Git 基本指令與說明 \n \n Step 1：初始化本地倉庫 \n git init\n     \n 在專案資料夾裡執行，建立 Git 管理的本地倉庫。 \n Step 2：加入遠端 GitHub 倉庫 \n git remote add origin https://github.com/你的帳號或組織/專案名稱.git\n     \n 將本地倉庫連結到 GitHub 上的遠端 repository。 \n Step 3：建立並切換到功能分支 \n git checkout -b feature/A        # 組員A\ngit checkout -b feature/B        # 組員B\ngit checkout -b feature/C        # 組員C\n     \n 每位組員建立自己的功能分支，分工開發。 \n Step 4：修改程式並加入暫存區 \n git add reeborg.py\n     \n 將變更過的檔案加入暫存區，準備提交。 \n Step 5：提交更動 \n git commit -m "描述這次開發的內容"\n     \n 將暫存區的變更提交到本地倉庫。 \n Step 6：推送分支到 GitHub \n git push -u origin feature/A        # 組員A\ngit push -u origin feature/B        # 組員B\ngit push -u origin feature/C        # 組員C\n     \n 把每個人的分支推到遠端 GitHub。 \n Step 7：建立 Pull Request 並審查合併     到 GitHub 網站上建立 Pull Request（PR），請其他組員 code review，審查無誤後合併到主分支（main）。 \n Step 8：將最新主分支同步回本地 \n git checkout main\ngit pull\n     \n 確保本地 main 跟遠端同步。 \n \n 加入共用函式 \n def turn(times):\n    for i in range(times):\n        turn_left()\n\ndef new_move(steps):\n    for i in range(steps):\n        move()\n \n 階段三：重構與加入迴圈、條件與函式應用 \n 將重複採收動作寫成  harvest_one_row()  函式，結合前進與轉彎，流程更清晰。 \n def harvest_one_row():\n    while object_here():\n        take()\n    else:\n        move()\n \n 階段四：導入 class，建立泛用 Reeborg 機器人控制架構 \n class ReeborgBot:\n    def turn(self, times):\n        for i in range(times):\n            turn_left()\n    def move_steps(self, steps):\n        for i in range(steps):\n            move()\n    def harvest_one_row(self):\n        while object_here():\n            take()\n        else:\n            move()\n    def harvest_field(self, rows, row_length):\n        for i in range(rows):\n            for j in range(row_length):\n                self.harvest_one_row()\n            if i != rows - 1:\n                self.turn(3)\n                self.move_steps(1)\n                self.turn(3)\n                self.move_steps(1)\n\n# 使用範例\nbot = ReeborgBot()\nbot.move_steps(2)\nturn_left()\nbot.move_steps(2)\nbot.harvest_field(3, 6)\n \n 協作開發流程與 Git/GitHub 應用摘要 \n \n git init ：建立本地專案。 \n git branch feature/A 、 git branch feature/B 、 git branch feature/C ：三位組員各自建立分支（或用  git checkout -b  一次完成）。 \n git add 、 git commit 、 git push ：將各自更動上傳到 GitHub。 \n Pull Request ：在 GitHub 建立 PR，進行 code review 與合併。 \n 遇重複邏輯，抽象為函式，用新分支推送與合併。 \n 最後導入 class，建立泛用控制架構，提升可維護性與擴充性。 \n \n 結語 \n 本例展示 Python 基礎語法、函式、類別應用，以及如何善用 Git/GitHub 進行協同開發，讓團隊程式碼更有架構、易於管理與擴展。 \n', 'tags': '', 'url': 'Git_ex1.html'}, {'title': 'Git_ex2', 'text': '三人協同開發 Reeborg 程式：Git/GitHub 詳細流程與指令 \n 專案設計演進與協作分工 \n \n 階段一：初始設計（三人各自撰寫基本功能） \n \n Alice：負責機器人移動與左轉基本動作 \n Bob：設計撿取物件的邏輯 \n Carol：設計主程式流程與方向判斷 \n \n # Alice\nmove()\nmove()\nturn_left()\nmove()\n\n# Bob\nif object_here():\n    take()\n\n# Carol\nwhile not is_facing_north():\n    turn_left()\n     \n git 指令： \n \n \n 三人各自建立分支並上傳初步程式片段 \n \n \n git checkout -b feature/move  # Alice\ngit checkout -b feature/take  # Bob\ngit checkout -b feature/dir   # Carol\n\ngit add reeborg.py\ngit commit -m "初步功能"\ngit push -u origin feature/move  # Alice\ngit push -u origin feature/take  # Bob\ngit push -u origin feature/dir   # Carol \n \n 階段二：重複迴圈設計（逐步將動作包裝為迴圈） \n \n Alice：將移動與轉向包裝進 for 迴圈 \n Bob：將撿取物件行為放入 while 迴圈 \n \n # Alice\nfor i in range(3):\n    move()\n\nfor i in range(2):\n    turn_left()\n\n# Bob\nwhile object_here():\n    take()\n     \n git 指令： \n \n \n 各自於分支更新程式並提交 \n \n \n git add reeborg.py\ngit commit -m "加入重複迴圈"\ngit push\n       \n \n 階段三：Function 封裝設計（將重複邏輯抽象為函式） \n \n Alice：設計  new_move 、 turn 、 turn_right \n Bob：設計  harvest_one_row ，用 global 記錄物件數 \n Carol：設計  is_facing_east  與主流程 \n \n def turn(n):\n    for i in range(n):\n        turn_left()\n\ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef new_move(n):\n    for i in range(n):\n        move()\n\ndef harvest_one_row():\n    global object_taken\n    while object_here() and object_taken < 36:\n        take()\n        object_taken += 1\n    if object_taken < 36:\n        move()\n\ndef is_facing_east():\n    count = 0\n    while not is_facing_north():\n        turn_left()\n        count += 1\n        if count == 4:\n            break\n    turn(3)\n    return True\n     \n git 指令： \n \n \n 各自於分支完成函式開發 \n \n \n git add reeborg.py\ngit commit -m "完成 function 封裝"\ngit push \n \n 階段四：導入 class-based 設計（最終彈性架構） \n \n Alice、Bob、Carol 協作將函式整合為 class，提升可維護性 \n \n class ReeborgBot:\n    def __init__(self):\n        self.object_taken = 0\n\n    def turn(self, n):\n        for i in range(n):\n            turn_left()\n    \n    def turn_right(self):\n        for i in range(3):\n            turn_left()\n\n    def new_move(self, n):\n        for i in range(n):\n            move()\n    \n    def harvest_one_row(self):\n        while object_here() and self.object_taken < 36:\n            take()\n            self.object_taken += 1\n        if self.object_taken < 36:\n            move()\n    \n    def is_facing_east(self):\n        count = 0\n        while not is_facing_north():\n            turn_left()\n            count += 1\n            if count == 4:\n                break\n        self.turn(3)\n        return True\n\n    def harvest_field(self):\n        self.new_move(2)\n        self.turn(1)\n        self.new_move(2)\n        done = False\n        while self.is_facing_east() and not done:\n            for _ in range(2):\n                for _ in range(6):\n                    self.harvest_one_row()\n                    if self.object_taken >= 36:\n                        done = True\n                        break\n                if done: break\n                for _ in range(2):\n                    self.turn(1)\n                    move()\n                for _ in range(6):\n                    self.harvest_one_row()\n                    if self.object_taken >= 36:\n                        done = True\n                        break\n                if done: break\n                for _ in range(2):\n                    self.turn_right()\n                    move()\n            if self.object_taken >= 36:\n                print("task completed!")\n                break\n\n# 使用範例\nbot = ReeborgBot()\nbot.harvest_field()\n     \n git 指令： \n \n \n 協作於 feature/class-based 分支整合 class 架構 \n \n \n git checkout -b feature/class-based\n# 合併 Alice/Bob/Carol 分支或直接在此分支重構\ngit add reeborg.py\ngit commit -m "整合 class-based 架構"\ngit push -u origin feature/class-based \n \n \n 專案開發分工摘要表 \n \n \n \n 組員 \n 負責內容 \n Git 分支名稱 \n \n \n Alice \n 基本移動與轉向（ new_move 、 turn 、 turn_right ） \n feature/move-turn \n \n \n Bob \n 收成邏輯（ harvest_one_row 、 object_taken ） \n feature/harvest \n \n \n Carol \n 方向判斷與主流程（ is_facing_east 、主執行流程） \n feature/main-loop \n \n \n \n GitHub 操作 Step by Step \n \n 由一位組員（如 Alice）新建 repo （如  reeborg-harvest ） \n 本地初始化： \n git clone https://github.com/your-org/reeborg-harvest.git\ncd reeborg-harvest \n \n 建立主分支 main： \n git checkout -b main\ngit push -u origin main \n \n 三位組員各自分出功能分支： \n git checkout -b feature/move-turn      # Alice\ngit checkout -b feature/harvest        # Bob\ngit checkout -b feature/main-loop      # Carol \n \n 推送分支到遠端： \n git push -u origin feature/move-turn      # Alice\ngit push -u origin feature/harvest        # Bob\ngit push -u origin feature/main-loop      # Carol \n \n 組員於各自分支開發程式並提交： \n git add reeborg.py\ngit commit -m "功能/重構/修正說明"\ngit push \n \n 建立 Pull Request（PR）並 Code Review： \n \n 於 GitHub 建立 PR，標明合併分支、審查人員、功能說明 \n 進行 code review，提出建議與修正 \n 審查通過後合併 PR（Merge pull request） \n \n \n main 分支同步至本地： \n git checkout main\ngit pull \n \n \n 後續協作建議 \n \n \n 每次新增功能或修正前，請先拉新分支，勿直接在 main 分支作業： \n \n \n git checkout -b feature/新功能 \n \n \n 合併前先同步主分支，解決衝突後再 push： \n \n \n git pull origin main\n# 如有衝突，解決後再\ngit add .\ngit commit -m "解決衝突"\ngit push \n \n 在 Pull Request 詳細描述修改內容與測試方式，方便審查。 \n 善用  git log 、 git status 、 git diff  檢查歷史與變更。 \n \n 常用 Git 指令說明 \n \n git checkout -b 分支名 ：從目前分支新建並切換到分支 \n git add 檔名 ：加入暫存區，準備提交 \n git commit -m "訊息" ：提交更動，寫下本次修改說明 \n git push -u origin 分支名 ：推送分支到遠端 \n git pull ：拉下遠端最新更動並合併 \n git merge 分支名 ：將指定分支合併到目前分支 \n git status ：顯示目前狀態、尚未提交的變更 \n git log ：查詢提交歷史 \n git diff ：顯示檔案內容變更差異 \n \n 結論 \n 本範例展現 Reeborg 機器人從最簡單設計、逐步進化至 class-based 架構的過程，以及三人協同開發的 Git/GitHub 分支工作流。遵循此流程能大幅提升團隊協作、程式碼品質與可維護性。 \n', 'tags': '', 'url': 'Git_ex2.html'}, {'title': 'Python', 'text': 'Learn Python with  Reeborg \n https://reeborg.ca/docs/en/ \n https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/ \n https://github.com/loukhin/Reeborg \n https://github.com/aroberge/reeborg-howto \n https://github.com/LeeRenJie/100-days-of-code-in-python \n Python code for Artificial Intelligence - Foundations of Computational Agents \n https://artint.info/AIPython/aipython.pdf \n Program AI with Python \n AI with Python \n Using Python for Artificial Intelligence \n Machine Learning with Python Tutorial \n Genetic Algorithms: \n ga_1.py  (from  https://www.geeksforgeeks.org/genetic-algorithms/ ) \n https://medium.com/analytics-vidhya/genetic-algorithm-494ac5be18bb \n https://medium.com/@LeonFedden/evolving-solutions-with-genetic-algorithms-e3122473a35f \n Apply GA to  https://github.com/mdecycu/cs101 \n', 'tags': '', 'url': 'Python.html'}, {'title': 'Python_ex1', 'text': 'Python 初學者學習指引 \n 一、學習步驟建議 \n \n 認識 Python 的應用與特色。 \n 選擇合適的學習平台，例如  Reeborg’s World 。 \n 熟悉 Python 的基本語法與執行方式。 \n 從簡單題目逐步挑戰更進階的練習。 \n 多做實作練習，並觀察程式執行結果。 \n \n 二、Python 必學基本語法 \n \n 變數與資料型態： \n x = 10\nname = "Alice"\nis_ok = True \n \n 輸出： \n print("Hello, world!") \n \n 運算子： \n \n 數學運算： + 、 - 、 * 、 / 、 // 、 % \n 比較運算： == 、 != 、 > 、 < \n 邏輯運算： and 、 or 、 not \n \n \n 條件判斷： \n if x > 0:\n    print("正數")\nelse:\n    print("非正數") \n \n 迴圈： \n while 條件:\n    # 重複執行內容\n \n \n 函式： \n def greet():\n    print("Hi!") \n \n 縮排與註解： \n # 這是註解\nif True:\n    print("這行有縮排") \n \n \n 三、Reeborg’s World 學習重點 \n \n 基本指令： \n \n move() ：前進一格 \n turn_left() ：左轉 \n take() ：撿起物品 \n put() ：放下物品 \n \n \n 感測與判斷： \n \n front_is_clear() ：前方有路 \n wall_in_front() ：前方有牆 \n object_here() ：目前格子有物品 \n \n \n 條件與迴圈應用： \n if front_is_clear():\n    move()\nelse:\n    turn_left()\n\nwhile not at_goal():\n    move() \n \n 自訂函式： \n def turn_right():\n    turn_left()\n    turn_left()\n    turn_left() \n \n \n 四、小結 \n \n 先學會基本語法與程式邏輯，再用 Reeborg 練習解題。 \n 多做題目，觀察執行結果與錯誤訊息，提升解決問題能力。 \n 熟悉條件判斷、迴圈、函式，是學好 Python 的基礎。 \n \n \n Python 初學者超詳細學習指引 （以 Reeborg 機器人練習為例） \n 一、Python 學習流程與心法 \n \n 認識 Python \n \n Python 是一種簡潔、易讀、用途廣泛的程式語言。 \n 常用於資料分析、人工智慧、網頁開發、自動化等領域。 \n 學好基礎語法，日後可延伸應用到許多不同領域。 \n \n \n 選擇學習工具 \n \n 初學推薦  Reeborg’s World ，直接練習程式，免安裝。 \n 也可用 Python 官方網站下載安裝，或用線上編輯器（如 repl.it、Google Colab）。 \n \n \n 循序漸進學習 \n \n 先熟悉「變數、運算子、條件、迴圈、函式」等核心語法。 \n 搭配 Reeborg 關卡，練習邏輯與解題。 \n 寫程式要勇於嘗試與修正，錯誤是學習的起點！ \n \n \n 主動多練習、多觀察、多思考 \n \n 練習題目與挑戰，能讓你熟悉語法、訓練邏輯。 \n 觀察程式執行過程與錯誤訊息，學會除錯（debug）。 \n 遇到卡關時，試著將問題拆解成小步驟。 \n \n \n \n 二、Python 基本語法說明與範例 \n \n \n \n 語法主題 \n 說明 \n 範例 \n \n \n 變數 \n 儲存資料（數字、文字、布林值等） \n x = 5 name = "Tom" is_ok = True \n \n \n 資料型態 \n 整數  int 、小數  float 、字串  str 、布林  bool \n a = 7 b = 3.14 c = "Hello" d = False \n \n \n 輸出 \n 用  print()  顯示資訊 \n print("Hello world!") print(x + 2) \n \n \n 運算子 \n 數學、比較、邏輯運算 \n  # 數學  y = x + 1  # 比較  x > 3  # 邏輯  True and False  \n \n \n 條件判斷 \n 根據條件執行不同程式碼 \n  if x > 0:  \xa0\xa0print("正數")  else:  \xa0\xa0print("負數或零")  \n \n \n 迴圈 (while) \n 重複執行，直到條件不成立 \n  count = 0  while count < 3:  \xa0\xa0print(count)  \xa0\xa0count += 1  \n \n \n for 迴圈（了解即可） \n 依序處理序列資料 \n  for i in range(5):  \xa0\xa0print(i)  \n \n \n 函式 \n 將重複動作打包，方便重用 \n  def say_hello():  \xa0\xa0print("Hello!")  say_hello()  \n \n \n 縮排與註解 \n Python 用縮排分區塊，註解用  # \n  # 這是註解  if True:  \xa0\xa0print("有縮排")  \n \n \n \n 小提醒：  Python 不用分號，且縮排必須統一（通常 4 個空格）。 \n 三、Reeborg\'s World 機器人操作重點 \n \n 基本指令 \n \n move() ：前進一格 \n turn_left() ：左轉 90 度 \n take() ：撿起物品 \n put() ：放下物品 \n \n \n 判斷世界狀態的感測器 \n \n front_is_clear() ：前方有路 \n wall_in_front() ：前方有牆 \n right_is_clear() ：右方有路 \n wall_on_right() ：右方有牆 \n object_here() ：目前格子有物品 \n at_goal() ：到達終點 \n \n \n 條件判斷/迴圈應用 \n \nif front_is_clear():\n    move()\nelse:\n    turn_left()\n\nwhile not at_goal():\n    move()\n                 \n \n 自訂函式（提升可讀性與重用） \n \ndef turn_right():\n    for i in range(3):\n        turn_left()\n\ndef pick_and_move():\n    take()\n    move()\n\n# 呼叫自訂函式\nturn_right()\n                 \n \n 解題流程建議 \n \n 仔細閱讀題目與世界設定。 \n 思考機器人要完成哪些步驟（可先畫流程圖）。 \n 將步驟拆解成小動作，分別寫成程式。 \n 適時用  if  或  while  控制流程。 \n 多嘗試、多觀察，多用 print 或步步執行除錯。 \n \n \n \n 常見錯誤： \n \n 少寫小括號（如  move  寫成  move() ）。 \n 縮排錯誤導致語法錯。 \n 無窮迴圈（如 while 條件永遠為真）。 \n \n \n 四、進階建議與常見問題 \n \n 多加練習 \n \n 完成 Reeborg 的所有世界（關卡）。 \n 嘗試設計自己的世界與題目。 \n \n \n 閱讀程式碼，互相學習 \n \n 觀摩別人解法，了解不同邏輯。 \n 勇於提問與討論（如參加線上社群）。 \n \n \n 養成良好習慣 \n \n 適當註解，提高可讀性。 \n 命名有意義的變數與函式。 \n \n \n \n 五、完整學習流程小結 \n \n 學會 Python 基本文法、邏輯思考。 \n 熟練 Reeborg 指令、感測器、流程控制。 \n 多練習、多觀察、多修正。 \n 培養拆解問題、設計函式的能力。 \n 主動探索更多應用與進階技巧。 \n \n', 'tags': '', 'url': 'Python_ex1.html'}, {'title': 'Javascript', 'text': 'JavaScript 初學者完整學習指引 \n 一、為什麼學 JavaScript？ \n \n JavaScript 是網頁開發必學語言，執行於所有主流瀏覽器。 \n 可用於前端（瀏覽器）、後端（Node.js）、行動應用、桌面應用等。 \n 社群大、資源多，學會 JS 等於打開 Web 世界大門。 \n \n 二、學習流程建議 \n \n 認識 JavaScript 應用場景及基礎語法。 \n 熟悉開發與測試環境： 推薦直接在 Chrome、Edge、Firefox 等瀏覽器按 F12 開啟「開發人員工具」→「主控台(Console)」練習。 \n 循序漸進學習語法與邏輯：從變數、流程控制、函式、物件等開始。 \n 多做練習題與小專案。 \n 了解 DOM 操作、事件處理與基礎網頁互動。 \n 進階可學習 ES6+ 新語法與框架（如 React、Vue）。 \n \n 三、JavaScript 必學基礎語法與範例 \n \n \n \n 語法主題 \n 說明 \n 範例 \n \n \n 變數宣告 \n 用  let 、 const （現代 JS）， 不要再用  var 。 \n let x = 10; const pi = 3.14; \n \n \n 資料型態 \n 數字（Number）、字串（String）、布林（Boolean）、陣列（Array）、物件（Object）、null、undefined \n  let s = "hi";  let arr = [1,2,3];  let person = { name: "Tom", age: 20 };  \n \n \n 輸出 \n 用  console.log()  輸出到主控台 \n console.log("Hello!"); console.log(x + 2); \n \n \n 運算子 \n 數學（+、-、*、/、%）、比較（==、===、!=、!==、>、<）、邏輯（&&、||、!） \n  let z = x + 5;  x === 10  (a > 0) && (b < 5)  \n \n \n 條件判斷 \n if、else if、else \n  if (x > 0) {  \xa0\xa0console.log("正數");  } else {  \xa0\xa0console.log("非正數");  }  \n \n \n 迴圈 \n for、while、do...while \n  for (let i = 0; i < 3; i++) {  \xa0\xa0console.log(i);  }    let count = 0;  while (count < 3) {  \xa0\xa0console.log(count);  \xa0\xa0count++;  }  \n \n \n 函式 \n 定義與呼叫，  ES6 支援箭頭函式 \n  function greet(name) {  \xa0\xa0console.log("Hi, " + name);  }  greet("Amy");    // 箭頭函式  const add = (a, b) => a + b;  console.log(add(2,3));  \n \n \n 陣列與物件 \n 基本操作：存取元素、方法如  push 、 forEach  等 \n  let nums = [1,2,3];  nums.push(4);  nums.forEach(item => console.log(item));    let person = { name: "Tom", age: 20 };  console.log(person.name);  \n \n \n 註解 \n 單行  // ，多行  /* */ \n  // 這是單行註解  /*  這是多行註解  */  \n \n \n \n 小提醒：  JavaScript 語法彈性大，但容易出現隱含錯誤，建議使用嚴格模式  \'use strict\'; ，養成良好命名與註解習慣。 \n 四、在網頁上的應用簡介 \n \n JavaScript 主要用於網頁互動、動態內容與事件處理。 \n 可透過  <script>  標籤直接在 HTML 內嵌或引用外部 JS 檔案： \n \n <!DOCTYPE html>\n<html>\n<head><title>JS 範例</title></head>\n<body>\n  <button onclick="sayHello()">點我</button>\n  <script>\n    function sayHello() {\n      alert("你好！");\n    }\n  </script>\n</body>\n</html> \n 五、常見錯誤與學習建議 \n \n 常見錯誤： \n \n 少分號或括號（雖然 JS 支援自動補全，但還是建議加上）。 \n 變數未宣告直接使用。 \n 區分  == （寬鬆相等）與  === （嚴格相等）。 \n 陣列與物件存取語法錯誤。 \n \n \n 學習建議： \n \n 多練習：在主控台嘗試各種語法。 \n 閱讀 MDN（Mozilla Developer Network）文件，查詢 JS 語法與用法。 \n 完成小專案，如計算機、Todo List、網頁互動等。 \n 多與他人討論，參加線上社群。 \n \n \n \n 六、進階主題（可視情況逐步學習） \n \n ES6+ 新語法（let、const、箭頭函式、解構賦值、展開運算子、模組化等） \n 事件處理、DOM 操作與網頁互動 \n 非同步程式（callback、Promise、async/await） \n 物件導向程式設計、類別（class） \n 前端框架（如 React、Vue、Angular） \n Node.js 伺服器端開發 \n \n', 'tags': '', 'url': 'Javascript.html'}, {'title': 'HTML and CSS', 'text': 'HTML & CSS 初學者學習指南 \n 一、HTML 與 CSS 是什麼？ \n \n HTML（超文件標記語言） ：負責「網頁內容」與「結構」的描述，是網頁的骨架。 \n CSS（層疊樣式表） ：負責「網頁外觀、樣式、版面」的設計，是網頁的皮膚與裝飾。 \n 兩者配合，讓你能打造美觀、結構良好的網站。 \n \n 二、學習步驟建議 \n \n 了解 HTML 與 CSS 各自用途與基本概念。 \n 從基礎標籤（如  <h1> 、 <p> 、 <img> ）與基本樣式（如顏色、字體、邊距）學起。 \n 邊學邊練習：可用  CodePen 、 JSFiddle 、本地文字編輯器練習。 \n 模仿簡單網頁，了解版型與排版原理。 \n 逐步學習表格、表單、版面配置（如 Flexbox、Grid）。 \n 挑戰自製個人履歷網頁、作品集、Landing Page 等小專案。 \n \n 三、HTML 必學標籤與語法 \n \n \n \n 標籤 \n 用途 \n 範例 \n \n \n <h1>  ~  <h6> \n 標題（h1 最大） \n <h1>主標題</h1> \n \n \n <p> \n 段落文字 \n <p>這是一段文字。</p> \n \n \n <a> \n 超連結 \n <a href="https://google.com">Google</a> \n \n \n <img> \n 插入圖片 \n <img src="cat.jpg" alt="貓咪"> \n \n \n <ul> 、 <ol> 、 <li> \n 無序/有序清單 \n  <ul>  \xa0\xa0<li>項目1</li>  \xa0\xa0<li>項目2</li>  </ul>  \n \n \n <div>  /  <span> \n 區塊/行內分組、CSS 樣式輔助 \n <div class="box">內容</div> \n \n \n <table> 、 <tr> 、 <td> \n 表格 \n  <table>  \xa0\xa0<tr><td>A</td><td>B</td></tr>  </table>  \n \n \n <form> 、 <input> \n 表單與輸入欄位 \n  <form>  \xa0\xa0<input type="text" placeholder="姓名">  </form>  \n \n \n \n 四、CSS 必學語法與範例 \n \n 基本選擇器： 元素 、 .類別 、 #ID \n 常用屬性： color （文字顏色）、 background （背景）、 font-size 、 width 、 height 、 margin 、 padding 、 border \n 文字對齊（ text-align ）、區塊對齊（ display 、 flex 、 grid ） \n CSS 寫法可在  <style>  標籤、 style  屬性或獨立 .css 檔案 \n \n \n/* 樣式檔範例 */\nh1 {\n    color: #2d7f5e;\n    font-size: 2em;\n    text-align: center;\n}\n.box {\n    background: #eaffea;\n    padding: 1em;\n    border-radius: 8px;\n    margin-bottom: 1em;\n}\n#main {\n    width: 80%;\n    margin: auto;\n}\n         \n 小技巧： \n \n 多善用瀏覽器「檢查元素」功能，調整 CSS 效果。 \n CSS 有「繼承」與「選擇器優先權」概念，遇到樣式衝突時要注意。 \n \n \n 五、常見練習與專案 \n \n 練習製作個人履歷網頁、名片網站、簡單 Landing Page。 \n 模仿喜歡的網站版型，重新切版練習。 \n 挑戰 CSS Flexbox、Grid 排版。 \n 試著設計表單、導航列、圖文混排區塊。 \n \n 六、常見錯誤與學習建議 \n 常見錯誤： \n \n HTML 標籤忘記閉合、層級錯誤。 \n CSS 拼字錯誤、屬性寫錯或分號遺漏。 \n 選擇器優先權搞混，導致樣式沒套用。 \n class 與 id 用法混淆。 \n \n \n \n 多手寫、多練習，熟悉標籤與屬性。 \n 常用  MDN Web Docs  查詢 HTML/CSS 語法。 \n 參加線上挑戰如  Frontend Mentor 、 CSS Battle 。 \n \n 七、進階主題推薦 \n \n RWD 響應式網頁設計（media query） \n CSS 動畫與過渡（animation, transition） \n SCSS/SASS 等 CSS 預處理器 \n Bootstrap、Tailwind CSS 等框架 \n 網頁無障礙（a11y）設計 \n \n', 'tags': '', 'url': 'HTML and CSS.html'}, {'title': 'Reeborg', 'text': 'https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1.py \n https://mde.tw/cp2025/reeborg?lang=en&mode=python&menu=worlds/menus/select_collection_en.json&name=Alone&url=worlds/tutorial_en/harvest1.json&editor=python/harvest1_east_west.py \xa0 \n \n https://mde.tw/reeborg \n https://github.com/mdecycu/cs101 \n https://reeborg.ca/docs/en/python/index.html \n https://aroberge.github.io/reeborg-api/ \n if using local static port 9442: \n Reeborg \n For Github Pages: \n Reeborg \n \n', 'tags': '', 'url': 'Reeborg.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'Brython.html'}]};