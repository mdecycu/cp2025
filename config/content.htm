<h1>About</h1>
<p>Repo: <a href="https://github.com/mdecycu/cp2025">https://github.com/mdecycu/cp2025</a></p>
<p>Web: <a href="https://mde.tw/cp2025">https://mde.tw/cp2025</a></p>
<p>可攜程式套件:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/portable_wcm2025_w10.7z">portable_wcm2025_w10.7z</a></p>
<p>課程內容:</p>
<p style="padding-left: 30px;">Python 與 Javascript 程式語法在 <a href="https://mde.tw/cp2025/reeborg">Reeborg</a> 機器人系統上的應用。</p>
<p style="padding-left: 30px;">利用 Git 與 Github 建立分組網站。</p>
<p>MS Teams 團隊代碼: w87x8do  </p>
<p>課程評分:</p>
<p style="padding-left: 30px;"><span style="background-color: #ffff00;">課程參與 (60%)</span> - MS Teams 線上參與，6人一組每三週發表學習心得。</p>
<p style="padding-left: 60px;">w3、w7、w10、w14、w17、w18</p>
<p style="padding-left: 30px;"><span style="background-color: #ffff00;">個人與分組網站維護 (40%)</span> - 每週至少兩次推送與課程進度相關的學習內容與心得。</p>
<p style="padding-left: 60px;">w9 期中自評、w18 期末自評</p>
<p>行事曆</p>
<p style="padding-left: 30px;">1a 上課時段: 每週三 13:20 - 16:10</p>
<p style="padding-left: 30px;">1b 上課時段: 每週四 09:10 - 12:00 (w17 1/1 放假)</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h1>Topics</h1>
<p>電腦輔助設計室電腦硬體與網路使用介紹</p>
<p style="padding-left: 30px;">C: 為 SSD，網路協定可以自行決定使用 IPv4 或 IPv6 (若使用純 IPv6 則必須設定 Proxy 才能連結到 github.com 以及僅支援 IPv4 協定的網站) </p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: w87x8do</p>
<p>下載可攜程式套件:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/portable_wcm2025_w10.7z">portable_wcm2025_w10.7z</a> (含 git、Python、Solvespace、Webots 與 Blender)</p>
<p>各學員自行<a href="https://docs.github.com/zh/get-started/start-your-journey/creating-an-account-on-github">建立 Github 帳號</a></p>
<p>說明如何建立分組倉儲 Template</p>
<p>學習如何開啟可攜套件、關閉可攜套件</p>
<p style="padding-left: 30px;">利用 Python 執行設計運算及維護倉儲與網站內容</p>
<p style="padding-left: 30px;">Windows <a href="https://hackmd.io/@peterju/B1pUqd-5c">Batch file</a> 與 <a href="https://link.springer.com/book/10.1007/978-1-4842-7064-6">Powershell</a> 應用 </p>
<p><a href="https://classroom.github.com/">Github Classroom</a> 上的分組網站: <a href="https://github.com/mdecp2025">https://github.com/mdecp2025</a> </p>
<p style="padding-left: 30px;"><a href="https://classroom.github.com/">Github Classroom</a> 是一套 Web based 工具，功能在於簡化採用 Github 倉儲進行教學與協同分組的工作 </p>
<p style="padding-left: 30px;">各組組長建立 <a href="https://classroom.github.com/">Github Classroom</a> 分組團隊，各組取得分組倉儲 </p>
<p>學習如何在近端電腦與 <a href="https://github.com/features/codespaces">Codespaces</a> 上維護分組倉儲內容</p>
<p style="padding-left: 30px;">近端: Github Token 與 SSH (Putty、Registry (<a href="https://learn.microsoft.com/zh-tw/troubleshoot/windows-server/performance/windows-registry-advanced-users">中文版</a>、<a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/performance/windows-registry-advanced-users">英文版</a>)應用)  </p>
<p>利用 <a href="https://mde.tw/cp2025/reeborg">Reeborg</a> 學習 Python 基本語法</p>
<hr/>
<h4>計算機程式課程主題總覽</h4>
<h4>課程簡介</h4>
<p>本課程以實作為導向，循序漸進學習 <strong>Python</strong>、<strong>JavaScript</strong>、<strong>HTML</strong>、<strong>CSS</strong> 等現代網頁與程式語言，最終應用於 <strong>Reeborg 機器人程式開發</strong>。內容設計結合理論與實作，強調程式邏輯、問題解決與跨語言應用能力。</p>
<ul>
<li>從零基礎學習程式語言的基本結構與語法</li>
<li>掌握網頁技術，為互動式機器人程式設計打下基礎</li>
<li>專題實作，應用於 Reeborg’s World 機器人操作與挑戰任務</li>
</ul>
<h4>課程主題與詳細內容</h4>
<h4>1. Python 基礎與 Reeborg 機器人程式設計</h4>
<ul>
<li><strong>Python 語言簡介：</strong> 特色、應用領域、開發環境介紹</li>
<li><strong>基本語法：</strong> 變數、資料型態、運算子、輸入與輸出</li>
<li><strong>流程控制：</strong> 條件判斷 (<code>if</code>, <code>elif</code>, <code>else</code>)、迴圈 (<code>while</code>, <code>for</code>)</li>
<li><strong>函式與模組：</strong> 函式定義與呼叫、自訂功能、模組導入</li>
<li><strong>Reeborg’s World 操作：</strong>
<ul>
<li>基本指令 (<code>move()</code>, <code>turn_left()</code>, <code>take()</code>, <code>put()</code>)</li>
<li>感測器判斷 (<code>front_is_clear()</code>, <code>wall_in_front()</code>, <code>object_here()</code>, <code>at_goal()</code>)</li>
<li>將 Python 程式邏輯應用於控制機器人走迷宮、撿物、解任務</li>
</ul>
</li>
<li><strong>實作練習：</strong> 關卡挑戰、流程規劃、錯誤偵錯與修正</li>
</ul>
<h4>2. JavaScript 程式設計基礎</h4>
<ul>
<li><strong>JavaScript 角色：</strong> 前端網頁互動語言，與 Python 差異與應用</li>
<li><strong>基本語法：</strong> 變數 (<code>let</code>, <code>const</code>)、資料型態、運算子、輸出 (<code>console.log()</code>)</li>
<li><strong>流程控制：</strong> 條件 (<code>if</code>, <code>else</code>)、迴圈 (<code>for</code>, <code>while</code>)</li>
<li><strong>函式與 ES6 新語法：</strong> 函式宣告、箭頭函式 (<code>() =&gt; {}</code>)</li>
<li><strong>陣列與物件：</strong> 基本操作、方法應用</li>
<li><strong>與網頁互動：</strong> 認識 DOM、事件處理等（為後續進階鋪路）</li>
<li><strong>小專題：</strong> 建立簡單計算機或互動網頁按鈕</li>
</ul>
<h4>3. HTML 基礎 - 建構網頁內容</h4>
<ul>
<li><strong>HTML 結構：</strong> 了解 <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code> 等標籤</li>
<li><strong>常用標籤：</strong> <code>&lt;h1&gt;~&lt;h6&gt;</code> 標題、<code>&lt;p&gt;</code> 段落、<code>&lt;a&gt;</code> 連結、<code>&lt;img&gt;</code> 圖片、<code>&lt;ul&gt;</code>/<code>&lt;ol&gt;</code> 列表、<code>&lt;table&gt;</code> 表格</li>
<li><strong>表單與輸入：</strong> <code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;button&gt;</code> 等</li>
<li><strong>結構化分區：</strong> <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code> 等</li>
<li><strong>專案實作：</strong> 製作個人簡歷網頁、Reeborg 世界說明頁等</li>
</ul>
<h4>4. CSS 樣式設計 - 美化網頁版面</h4>
<ul>
<li><strong>CSS 基本語法：</strong> 選擇器、屬性、值的語法結構</li>
<li><strong>常用樣式：</strong> 顏色 (<code>color</code>、<code>background</code>)、字型 (<code>font-size</code>、<code>font-family</code>)、邊框 (<code>border</code>), 間距 (<code>margin</code>, <code>padding</code>)</li>
<li><strong>版面配置：</strong> <code>display</code>、<code>flex</code>、<code>grid</code> 基礎</li>
<li><strong>RWD 響應式設計：</strong> 讓你的網頁適合不同裝置</li>
<li><strong>CSS 與 HTML 整合：</strong> 內嵌樣式、內部樣式表、外部 CSS 檔案</li>
<li><strong>美化 Reeborg 機器人專案網頁：</strong> 實作練習</li>
</ul>
<h4>5. 綜合應用 - Reeborg 機器人專案開發</h4>
<ul>
<li><strong>專案規劃與團隊合作：</strong> 需求分析、分工合作</li>
<li><strong>跨語言整合：</strong> 利用 Python 控制邏輯、JavaScript 增強互動、HTML/CSS 展示結果</li>
<li><strong>打造專屬 Reeborg 世界：</strong> 設計自訂任務與挑戰</li>
<li><strong>成果展示：</strong> 發表與互評，分享學習心得</li>
</ul>
<h4>學習建議與資源</h4>
<ul>
<li>多加練習與嘗試，遇到困難主動討論與尋找資料</li>
<li>推薦學習網站：<a href="https://reeborg.ca/" target="_blank">Reeborg’s World</a>、<a href="https://www.w3schools.com/" target="_blank">W3Schools</a>、<a href="https://developer.mozilla.org/zh-TW/" target="_blank">MDN Web Docs</a></li>
<li>建議每週規劃自主練習與小專案，培養實作與解決問題能力</li>
<li>記錄學習歷程，定期回顧與修正</li>
</ul><h2>Git</h2>
<p><span style="background-color: #ffff00;">為何計算機程式要使用 Git 與 Github?</span></p>
<p>計算機程式（軟體開發）使用 Git 與 GitHub 主要有以下幾個原因：</p>
<ol>
<li>版本控制: Git 是一套分散式的版本控制系統，能記錄每一個檔案的修改歷程。這樣就算不小心改壞了，也能隨時回復到以前的版本，追蹤誰改了什麼、什麼時候改的。</li>
<li>團隊協作: 多個開發者可以同時對同一個專案進行開發，透過分支（branch）機制，各自開發新功能、修 bug，最後再合併（merge）到主分支，避免互相覆蓋程式碼。</li>
<li>雲端備份與分享: GitHub 是基於 Git 的雲端代管平台，可以將本地的 Git 專案上傳到雲端，不怕資料遺失。也方便將程式碼公開或私下分享給其他人。</li>
<li>問題追蹤與管理: GitHub 除了儲存程式碼，還提供 issue、pull request 等工具，有助於追蹤 bug、討論功能、審查程式碼，提高專案管理效率。</li>
<li>開放原始碼與社群合作: 許多開放原始碼專案都放在 GitHub，任何人都能貢獻程式碼，促進社群協作與學習。</li>
<li>總結：使用 Git 和 GitHub 可以讓程式開發更有組織、更安全、更容易協作與管理，也方便與他人分享、學習與成長。</li>
</ol>
<p><span style="background-color: #ffff00;">請舉實際的計算機程式案例，說明如何操作 Git 與 Github，以便取得程式開發流程的便利與優勢。</span></p>
<p>Git 與 GitHub 操作案例說明</p>
<h4>Git 與 GitHub 實際操作案例：多人開發 ToDo List 網站</h4>
<div>
<h4>1. 專案初始化與上傳</h4>
<div>
<h4><strong>步驟：</strong></h4>
<ol>
<li>在本機建立專案資料夾，初始化 Git：
<pre><code>git init</code></pre>
</li>
<li>新增檔案（如 <code>index.html</code>、<code>app.js</code>），並提交第一個版本：
<pre><code>git add .<br/>git commit -m "Initial commit"</code></pre>
</li>
<li>在 GitHub 建立新 repository，然後將本機專案推送到遠端：
<pre><code>git remote add origin https://github.com/username/todo-app.git<br/>git push -u origin master</code></pre>
</li>
</ol>
<p><strong>優勢：</strong> 所有程式碼都有歷史紀錄，且安全備份於雲端。</p>
</div>
</div>
<div>
<h4>2. 分支開發新功能</h4>
<div>
<p><strong>情境：</strong>小明負責開發「新增待辦事項」功能。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>建立新分支：
<pre><code>git checkout -b feature/add-todo-item</code></pre>
</li>
<li>實作功能並提交：
<pre><code>git add .<br/>git commit -m "Add feature to create todo item"</code></pre>
</li>
<li>推送分支到 GitHub：
<pre><code>git push origin feature/add-todo-item</code></pre>
</li>
</ol>
<p><strong>優勢：</strong> 各自分支開發，互不干擾，降低衝突風險。</p>
</div>
</div>
<div>
<h4>3. Pull Request（合併請求）與 Code Review</h4>
<div class="step">
<p><strong>情境：</strong>小明開發完成，欲合併新功能到主分支。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>在 GitHub 上建立 Pull Request，描述功能內容。</li>
<li>其他團隊成員審查程式碼，提出建議或修正。</li>
<li>經討論無誤後，管理員合併 PR。</li>
</ol>
<p><strong>優勢：</strong> 強化程式品質與團隊溝通，每次合併都有討論紀錄。</p>
</div>
</div>
<div>
<h4>4. 處理 Bug 與 Issue 追蹤</h4>
<div class="step">
<p><strong>情境：</strong>使用者發現「無法刪除待辦事項」的 bug。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>在 GitHub issue 區提出 bug 報告。</li>
<li>團隊分配成員修正，建立 <code>fix/delete-todo-bug</code> 分支。</li>
<li>修正後提交、發 PR、review、合併。</li>
</ol>
<p><strong>優勢：</strong> 所有 bug、功能需求有明確記錄，修正過程透明。</p>
</div>
</div>
<div>
<h4>5. 版本回溯與復原</h4>
<div class="step">
<p><strong>情境：</strong>新功能導致主分支出錯。</p>
<p><strong>步驟：</strong></p>
<ol>
<li>透過 Git log 查找歷史版本：
<pre><code>git log</code></pre>
</li>
<li>回復到上一個穩定版本：
<pre><code>git checkout &lt;commit-id&gt;</code></pre>
</li>
</ol>
<p><strong>優勢：</strong> 不怕程式「改壞」，可隨時回復，輕鬆追蹤誰做了什麼修改。</p>
</div>
</div>
<div>
<h4>總結</h4>
<p>Git 與 GitHub 提供完整的版本控制、團隊協作、問題追蹤、程式碼審查與備份機制，讓開發流程更有條理，大幅提升開發效率與品質。不論團隊或個人開發，都能享有回溯、備份、管理等多重好處。</p>
<h3>Git_ex1</h3>
<h4>Reeborg 機器人 Python 開發流程與 Git/GitHub 協作範例</h4>
<h4>階段一：基礎 Python 與 Reeborg 指令</h4>
<p>初學者可直接用 Python 撰寫簡單的 <a href="https://mde.tw/cp2025/reeborg/">Reeborg 機器人程式</a>，例如讓機器人向前走數步、左轉、撿物件：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">move()
move()
turn_left()
move()
if object_here():
    take()
</pre>
<h4>階段二：加入函式與三人協同開發</h4>
<div class="collab"><strong>協作情境：</strong>三位組員（A、B、C）各自開發一段行走任務，然後將重複動作寫成函式，合併到專案。</div>
<ol>
<li><strong>組員 A:</strong> 讓機器人前進 3 格
<pre>for i in range(3):
    move()
</pre>
</li>
<li><strong>組員 B:</strong> 機器人轉 2 次左
<pre>for i in range(2):
    turn_left()
</pre>
</li>
<li><strong>組員 C:</strong> 機器人檢查物件並撿取
<pre>if object_here():
    take()
</pre>
</li>
</ol>
<p><span class="tip">協作流程：</span>三人各自建立分支（feature/A, feature/B, feature/C），在 GitHub 上合併 Pull Request，最後由主分支整合。</p>
<h4>Git 基本指令與說明</h4>
<ul>
<li><strong>Step 1：初始化本地倉庫</strong>
<pre>git init
    </pre>
<span>在專案資料夾裡執行，建立 Git 管理的本地倉庫。</span></li>
<li><strong>Step 2：加入遠端 GitHub 倉庫</strong>
<pre>git remote add origin https://github.com/你的帳號或組織/專案名稱.git
    </pre>
<span>將本地倉庫連結到 GitHub 上的遠端 repository。</span></li>
<li><strong>Step 3：建立並切換到功能分支</strong>
<pre>git checkout -b feature/A        # 組員A
git checkout -b feature/B        # 組員B
git checkout -b feature/C        # 組員C
    </pre>
<span>每位組員建立自己的功能分支，分工開發。</span></li>
<li><strong>Step 4：修改程式並加入暫存區</strong>
<pre>git add reeborg.py
    </pre>
<span>將變更過的檔案加入暫存區，準備提交。</span></li>
<li><strong>Step 5：提交更動</strong>
<pre>git commit -m "描述這次開發的內容"
    </pre>
<span>將暫存區的變更提交到本地倉庫。</span></li>
<li><strong>Step 6：推送分支到 GitHub</strong>
<pre>git push -u origin feature/A        # 組員A
git push -u origin feature/B        # 組員B
git push -u origin feature/C        # 組員C
    </pre>
<span>把每個人的分支推到遠端 GitHub。</span></li>
<li><strong>Step 7：建立 Pull Request 並審查合併</strong> <br/> <span>到 GitHub 網站上建立 Pull Request（PR），請其他組員 code review，審查無誤後合併到主分支（main）。</span></li>
<li><strong>Step 8：將最新主分支同步回本地</strong>
<pre>git checkout main
git pull
    </pre>
<span>確保本地 main 跟遠端同步。</span></li>
</ul>
<h4>加入共用函式</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def turn(times):
    for i in range(times):
        turn_left()

def new_move(steps):
    for i in range(steps):
        move()
</pre>
<pre>階段三：重構與加入迴圈、條件與函式應用</pre>
<p>將重複採收動作寫成 <code>harvest_one_row()</code> 函式，結合前進與轉彎，流程更清晰。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def harvest_one_row():
    while object_here():
        take()
    else:
        move()
</pre>
<h4>階段四：導入 class，建立泛用 Reeborg 機器人控制架構</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class ReeborgBot:
    def turn(self, times):
        for i in range(times):
            turn_left()
    def move_steps(self, steps):
        for i in range(steps):
            move()
    def harvest_one_row(self):
        while object_here():
            take()
        else:
            move()
    def harvest_field(self, rows, row_length):
        for i in range(rows):
            for j in range(row_length):
                self.harvest_one_row()
            if i != rows - 1:
                self.turn(3)
                self.move_steps(1)
                self.turn(3)
                self.move_steps(1)

# 使用範例
bot = ReeborgBot()
bot.move_steps(2)
turn_left()
bot.move_steps(2)
bot.harvest_field(3, 6)
</pre>
<pre>協作開發流程與 Git/GitHub 應用摘要</pre>
<ol>
<li><b>git init</b>：建立本地專案。</li>
<li><b>git branch feature/A</b>、<b>git branch feature/B</b>、<b>git branch feature/C</b>：三位組員各自建立分支（或用 <b>git checkout -b</b> 一次完成）。</li>
<li><b>git add</b>、<b>git commit</b>、<b>git push</b>：將各自更動上傳到 GitHub。</li>
<li><b>Pull Request</b>：在 GitHub 建立 PR，進行 code review 與合併。</li>
<li>遇重複邏輯，抽象為函式，用新分支推送與合併。</li>
<li>最後導入 class，建立泛用控制架構，提升可維護性與擴充性。</li>
</ol>
<h4>結語</h4>
<p>本例展示 Python 基礎語法、函式、類別應用，以及如何善用 Git/GitHub 進行協同開發，讓團隊程式碼更有架構、易於管理與擴展。</p>
<h3>Git_ex2</h3>
<h4>三人協同開發 Reeborg 程式：Git/GitHub 詳細流程與指令</h4>
<h4>專案設計演進與協作分工</h4>
<ol>
<li><b>階段一：初始設計（三人各自撰寫基本功能）</b>
<ul>
<li>Alice：負責機器人移動與左轉基本動作</li>
<li>Bob：設計撿取物件的邏輯</li>
<li>Carol：設計主程式流程與方向判斷</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Alice
move()
move()
turn_left()
move()

# Bob
if object_here():
    take()

# Carol
while not is_facing_north():
    turn_left()
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>三人各自建立分支並上傳初步程式片段</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b feature/move  # Alice
git checkout -b feature/take  # Bob
git checkout -b feature/dir   # Carol

git add reeborg.py
git commit -m "初步功能"
git push -u origin feature/move  # Alice
git push -u origin feature/take  # Bob
git push -u origin feature/dir   # Carol</pre>
</li>
<li><b>階段二：重複迴圈設計（逐步將動作包裝為迴圈）</b>
<ul>
<li>Alice：將移動與轉向包裝進 for 迴圈</li>
<li>Bob：將撿取物件行為放入 while 迴圈</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Alice
for i in range(3):
    move()

for i in range(2):
    turn_left()

# Bob
while object_here():
    take()
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>各自於分支更新程式並提交</li>
</ul>
</ul>
<pre>git add reeborg.py
git commit -m "加入重複迴圈"
git push
      </pre>
</li>
<li><b>階段三：Function 封裝設計（將重複邏輯抽象為函式）</b>
<ul>
<li>Alice：設計 <code>new_move</code>、<code>turn</code>、<code>turn_right</code></li>
<li>Bob：設計 <code>harvest_one_row</code>，用 global 記錄物件數</li>
<li>Carol：設計 <code>is_facing_east</code> 與主流程</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def turn(n):
    for i in range(n):
        turn_left()

def turn_right():
    for i in range(3):
        turn_left()

def new_move(n):
    for i in range(n):
        move()

def harvest_one_row():
    global object_taken
    while object_here() and object_taken &lt; 36:
        take()
        object_taken += 1
    if object_taken &lt; 36:
        move()

def is_facing_east():
    count = 0
    while not is_facing_north():
        turn_left()
        count += 1
        if count == 4:
            break
    turn(3)
    return True
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>各自於分支完成函式開發</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git add reeborg.py
git commit -m "完成 function 封裝"
git push</pre>
</li>
<li><b>階段四：導入 class-based 設計（最終彈性架構）</b>
<ul>
<li>Alice、Bob、Carol 協作將函式整合為 class，提升可維護性</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class ReeborgBot:
    def __init__(self):
        self.object_taken = 0

    def turn(self, n):
        for i in range(n):
            turn_left()
    
    def turn_right(self):
        for i in range(3):
            turn_left()

    def new_move(self, n):
        for i in range(n):
            move()
    
    def harvest_one_row(self):
        while object_here() and self.object_taken &lt; 36:
            take()
            self.object_taken += 1
        if self.object_taken &lt; 36:
            move()
    
    def is_facing_east(self):
        count = 0
        while not is_facing_north():
            turn_left()
            count += 1
            if count == 4:
                break
        self.turn(3)
        return True

    def harvest_field(self):
        self.new_move(2)
        self.turn(1)
        self.new_move(2)
        done = False
        while self.is_facing_east() and not done:
            for _ in range(2):
                for _ in range(6):
                    self.harvest_one_row()
                    if self.object_taken &gt;= 36:
                        done = True
                        break
                if done: break
                for _ in range(2):
                    self.turn(1)
                    move()
                for _ in range(6):
                    self.harvest_one_row()
                    if self.object_taken &gt;= 36:
                        done = True
                        break
                if done: break
                for _ in range(2):
                    self.turn_right()
                    move()
            if self.object_taken &gt;= 36:
                print("task completed!")
                break

# 使用範例
bot = ReeborgBot()
bot.harvest_field()
    </pre>
<p><b>git 指令：</b></p>
<ul>
<ul>
<li>協作於 feature/class-based 分支整合 class 架構</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b feature/class-based
# 合併 Alice/Bob/Carol 分支或直接在此分支重構
git add reeborg.py
git commit -m "整合 class-based 架構"
git push -u origin feature/class-based</pre>
</li>
</ol>
<h4>專案開發分工摘要表</h4>
<table>
<tbody>
<tr>
<th>組員</th>
<th>負責內容</th>
<th>Git 分支名稱</th>
</tr>
<tr>
<td>Alice</td>
<td>基本移動與轉向（<code>new_move</code>、<code>turn</code>、<code>turn_right</code>）</td>
<td>feature/move-turn</td>
</tr>
<tr>
<td>Bob</td>
<td>收成邏輯（<code>harvest_one_row</code>、<code>object_taken</code>）</td>
<td>feature/harvest</td>
</tr>
<tr>
<td>Carol</td>
<td>方向判斷與主流程（<code>is_facing_east</code>、主執行流程）</td>
<td>feature/main-loop</td>
</tr>
</tbody>
</table>
<h4>GitHub 操作 Step by Step</h4>
<ol>
<li><b>由一位組員（如 Alice）新建 repo</b>（如 <code>reeborg-harvest</code>）</li>
<li><b>本地初始化：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git clone https://github.com/your-org/reeborg-harvest.git
cd reeborg-harvest</pre>
</li>
<li><b>建立主分支 main：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b main
git push -u origin main</pre>
</li>
<li><b>三位組員各自分出功能分支：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout -b feature/move-turn      # Alice
git checkout -b feature/harvest        # Bob
git checkout -b feature/main-loop      # Carol</pre>
</li>
<li><b>推送分支到遠端：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git push -u origin feature/move-turn      # Alice
git push -u origin feature/harvest        # Bob
git push -u origin feature/main-loop      # Carol</pre>
</li>
<li><b>組員於各自分支開發程式並提交：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git add reeborg.py
git commit -m "功能/重構/修正說明"
git push</pre>
</li>
<li><b>建立 Pull Request（PR）並 Code Review：</b>
<ul>
<li>於 GitHub 建立 PR，標明合併分支、審查人員、功能說明</li>
<li>進行 code review，提出建議與修正</li>
<li>審查通過後合併 PR（Merge pull request）</li>
</ul>
</li>
<li><b>main 分支同步至本地：</b>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git checkout main
git pull</pre>
</li>
</ol>
<h4>後續協作建議</h4>
<ul>
<ul>
<li>每次新增功能或修正前，請先拉新分支，勿直接在 main 分支作業：</li>
</ul>
</ul>
<pre>git checkout -b feature/新功能</pre>
<ul>
<ul>
<li>合併前先同步主分支，解決衝突後再 push：</li>
</ul>
</ul>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git pull origin main
# 如有衝突，解決後再
git add .
git commit -m "解決衝突"
git push</pre>
<ul>
<li>在 Pull Request 詳細描述修改內容與測試方式，方便審查。</li>
<li>善用 <code>git log</code>、<code>git status</code>、<code>git diff</code> 檢查歷史與變更。</li>
</ul>
<h4>常用 Git 指令說明</h4>
<ul>
<li><code>git checkout -b 分支名</code>：從目前分支新建並切換到分支</li>
<li><code>git add 檔名</code>：加入暫存區，準備提交</li>
<li><code>git commit -m "訊息"</code>：提交更動，寫下本次修改說明</li>
<li><code>git push -u origin 分支名</code>：推送分支到遠端</li>
<li><code>git pull</code>：拉下遠端最新更動並合併</li>
<li><code>git merge 分支名</code>：將指定分支合併到目前分支</li>
<li><code>git status</code>：顯示目前狀態、尚未提交的變更</li>
<li><code>git log</code>：查詢提交歷史</li>
<li><code>git diff</code>：顯示檔案內容變更差異</li>
</ul>
<h4>結論</h4>
<p>本範例展現 Reeborg 機器人從最簡單設計、逐步進化至 class-based 架構的過程，以及三人協同開發的 Git/GitHub 分支工作流。遵循此流程能大幅提升團隊協作、程式碼品質與可維護性。</p>
<h2>Python</h2>
<p>Learn Python with <a href="https://mde.tw/reeborg">Reeborg</a></p>
<p style="padding-left: 30px;"><a href="https://reeborg.ca/docs/en/">https://reeborg.ca/docs/en/</a></p>
<p style="padding-left: 30px;"><a href="https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/">https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/loukhin/Reeborg">https://github.com/loukhin/Reeborg</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/aroberge/reeborg-howto">https://github.com/aroberge/reeborg-howto</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/LeeRenJie/100-days-of-code-in-python">https://github.com/LeeRenJie/100-days-of-code-in-python</a></p>
<p>Python code for Artificial Intelligence - Foundations of Computational Agents</p>
<p style="padding-left: 30px;"><a href="https://artint.info/AIPython/aipython.pdf">https://artint.info/AIPython/aipython.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/387024839_Programming_AI_with_Python">Program AI with Python</a></p>
<p style="padding-left: 30px;"><a href="https://www.tutorialspoint.com/artificial_intelligence_with_python/artificial_intelligence_with_python_tutorial.pdf">AI with Python</a></p>
<p style="padding-left: 30px;"><a href="https://web.stanford.edu/class/archive/cs/cs106a/cs106a.1208/lectures/26-Intro-to-AI/26-Intro-to-AI.pdf">Using Python for Artificial Intelligence</a></p>
<p style="padding-left: 30px;"><a href="https://python-course.eu/books/bernd_klein_python_and_machine_learning_a4.pdf">Machine Learning with Python Tutorial</a></p>
<p>Genetic Algorithms:</p>
<p style="padding-left: 30px;"><a href="/downloads/GA/ga_1.py">ga_1.py</a> (from <a href="https://www.geeksforgeeks.org/genetic-algorithms/">https://www.geeksforgeeks.org/genetic-algorithms/</a>)</p>
<p style="padding-left: 30px;"><a href="https://medium.com/analytics-vidhya/genetic-algorithm-494ac5be18bb">https://medium.com/analytics-vidhya/genetic-algorithm-494ac5be18bb</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@LeonFedden/evolving-solutions-with-genetic-algorithms-e3122473a35f">https://medium.com/@LeonFedden/evolving-solutions-with-genetic-algorithms-e3122473a35f</a></p>
<p style="padding-left: 30px;">Apply GA to <a href="https://github.com/mdecycu/cs101">https://github.com/mdecycu/cs101</a></p>
<h3>Python_ex1</h3>
<h4>Python 初學者學習指引</h4>
<h4>一、學習步驟建議</h4>
<ol>
<li>認識 Python 的應用與特色。</li>
<li>選擇合適的學習平台，例如 <a href="https://reeborg.ca" target="_blank">Reeborg’s World</a>。</li>
<li>熟悉 Python 的基本語法與執行方式。</li>
<li>從簡單題目逐步挑戰更進階的練習。</li>
<li>多做實作練習，並觀察程式執行結果。</li>
</ol>
<h4>二、Python 必學基本語法</h4>
<ul>
<li><strong>變數與資料型態：</strong>
<pre><code>x = 10
name = "Alice"
is_ok = True</code></pre>
</li>
<li><strong>輸出：</strong>
<pre><code>print("Hello, world!")</code></pre>
</li>
<li><strong>運算子：</strong>
<ul>
<li>數學運算：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>//</code>、<code>%</code></li>
<li>比較運算：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code></li>
<li>邏輯運算：<code>and</code>、<code>or</code>、<code>not</code></li>
</ul>
</li>
<li><strong>條件判斷：</strong>
<pre><code>if x &gt; 0:
    print("正數")
else:
    print("非正數")</code></pre>
</li>
<li><strong>迴圈：</strong>
<pre><code>while 條件:
    # 重複執行內容
</code></pre>
</li>
<li><strong>函式：</strong>
<pre><code>def greet():
    print("Hi!")</code></pre>
</li>
<li><strong>縮排與註解：</strong>
<pre><code># 這是註解
if True:
    print("這行有縮排")</code></pre>
</li>
</ul>
<h4>三、Reeborg’s World 學習重點</h4>
<ul>
<li><strong>基本指令：</strong>
<ul>
<li><code>move()</code>：前進一格</li>
<li><code>turn_left()</code>：左轉</li>
<li><code>take()</code>：撿起物品</li>
<li><code>put()</code>：放下物品</li>
</ul>
</li>
<li><strong>感測與判斷：</strong>
<ul>
<li><code>front_is_clear()</code>：前方有路</li>
<li><code>wall_in_front()</code>：前方有牆</li>
<li><code>object_here()</code>：目前格子有物品</li>
</ul>
</li>
<li><strong>條件與迴圈應用：</strong>
<pre><code>if front_is_clear():
    move()
else:
    turn_left()

while not at_goal():
    move()</code></pre>
</li>
<li><strong>自訂函式：</strong>
<pre><code>def turn_right():
    turn_left()
    turn_left()
    turn_left()</code></pre>
</li>
</ul>
<h4>四、小結</h4>
<ul>
<li>先學會基本語法與程式邏輯，再用 Reeborg 練習解題。</li>
<li>多做題目，觀察執行結果與錯誤訊息，提升解決問題能力。</li>
<li>熟悉條件判斷、迴圈、函式，是學好 Python 的基礎。</li>
</ul>
<hr/>
<h4>Python 初學者超詳細學習指引<br/><small>（以 Reeborg 機器人練習為例）</small></h4>
<h4>一、Python 學習流程與心法</h4>
<ol>
<li><strong>認識 Python</strong>
<ul>
<li>Python 是一種簡潔、易讀、用途廣泛的程式語言。</li>
<li>常用於資料分析、人工智慧、網頁開發、自動化等領域。</li>
<li>學好基礎語法，日後可延伸應用到許多不同領域。</li>
</ul>
</li>
<li><strong>選擇學習工具</strong>
<ul>
<li>初學推薦 <a href="https://reeborg.ca/" target="_blank">Reeborg’s World</a>，直接練習程式，免安裝。</li>
<li>也可用 Python 官方網站下載安裝，或用線上編輯器（如 repl.it、Google Colab）。</li>
</ul>
</li>
<li><strong>循序漸進學習</strong>
<ul>
<li>先熟悉「變數、運算子、條件、迴圈、函式」等核心語法。</li>
<li>搭配 Reeborg 關卡，練習邏輯與解題。</li>
<li>寫程式要勇於嘗試與修正，錯誤是學習的起點！</li>
</ul>
</li>
<li><strong>主動多練習、多觀察、多思考</strong>
<ul>
<li>練習題目與挑戰，能讓你熟悉語法、訓練邏輯。</li>
<li>觀察程式執行過程與錯誤訊息，學會除錯（debug）。</li>
<li>遇到卡關時，試著將問題拆解成小步驟。</li>
</ul>
</li>
</ol>
<h4>二、Python 基本語法說明與範例</h4>
<table>
<tbody>
<tr>
<th>語法主題</th>
<th>說明</th>
<th>範例</th>
</tr>
<tr>
<td>變數</td>
<td>儲存資料（數字、文字、布林值等）</td>
<td><code>x = 5<br/>name = "Tom"<br/>is_ok = True</code></td>
</tr>
<tr>
<td>資料型態</td>
<td>整數 <code>int</code>、小數 <code>float</code>、字串 <code>str</code>、布林 <code>bool</code></td>
<td><code>a = 7<br/>b = 3.14<br/>c = "Hello"<br/>d = False</code></td>
</tr>
<tr>
<td>輸出</td>
<td>用 <code>print()</code> 顯示資訊</td>
<td><code>print("Hello world!")<br/>print(x + 2)</code></td>
</tr>
<tr>
<td>運算子</td>
<td>數學、比較、邏輯運算</td>
<td><code> # 數學<br/> y = x + 1<br/> # 比較<br/> x &gt; 3<br/> # 邏輯<br/> True and False </code></td>
</tr>
<tr>
<td>條件判斷</td>
<td>根據條件執行不同程式碼</td>
<td><code> if x &gt; 0:<br/>   print("正數")<br/> else:<br/>   print("負數或零") </code></td>
</tr>
<tr>
<td>迴圈 (while)</td>
<td>重複執行，直到條件不成立</td>
<td><code> count = 0<br/> while count &lt; 3:<br/>   print(count)<br/>   count += 1 </code></td>
</tr>
<tr>
<td>for 迴圈（了解即可）</td>
<td>依序處理序列資料</td>
<td><code> for i in range(5):<br/>   print(i) </code></td>
</tr>
<tr>
<td>函式</td>
<td>將重複動作打包，方便重用</td>
<td><code> def say_hello():<br/>   print("Hello!")<br/> say_hello() </code></td>
</tr>
<tr>
<td>縮排與註解</td>
<td>Python 用縮排分區塊，註解用 <code>#</code></td>
<td><code> # 這是註解<br/> if True:<br/>   print("有縮排") </code></td>
</tr>
</tbody>
</table>
<div class="tip"><strong>小提醒：</strong> Python 不用分號，且縮排必須統一（通常 4 個空格）。</div>
<h4>三、Reeborg's World 機器人操作重點</h4>
<ul>
<li><strong>基本指令</strong>
<ul>
<li><code>move()</code>：前進一格</li>
<li><code>turn_left()</code>：左轉 90 度</li>
<li><code>take()</code>：撿起物品</li>
<li><code>put()</code>：放下物品</li>
</ul>
</li>
<li><strong>判斷世界狀態的感測器</strong>
<ul>
<li><code>front_is_clear()</code>：前方有路</li>
<li><code>wall_in_front()</code>：前方有牆</li>
<li><code>right_is_clear()</code>：右方有路</li>
<li><code>wall_on_right()</code>：右方有牆</li>
<li><code>object_here()</code>：目前格子有物品</li>
<li><code>at_goal()</code>：到達終點</li>
</ul>
</li>
<li><strong>條件判斷/迴圈應用</strong>
<pre><code>
if front_is_clear():
    move()
else:
    turn_left()

while not at_goal():
    move()
                </code></pre>
</li>
<li><strong>自訂函式（提升可讀性與重用）</strong>
<pre><code>
def turn_right():
    for i in range(3):
        turn_left()

def pick_and_move():
    take()
    move()

# 呼叫自訂函式
turn_right()
                </code></pre>
</li>
<li><strong>解題流程建議</strong>
<ol>
<li>仔細閱讀題目與世界設定。</li>
<li>思考機器人要完成哪些步驟（可先畫流程圖）。</li>
<li>將步驟拆解成小動作，分別寫成程式。</li>
<li>適時用 <code>if</code> 或 <code>while</code> 控制流程。</li>
<li>多嘗試、多觀察，多用 print 或步步執行除錯。</li>
</ol>
</li>
</ul>
<div class="warning"><strong>常見錯誤：</strong>
<ul>
<li>少寫小括號（如 <code>move</code> 寫成 <code>move()</code>）。</li>
<li>縮排錯誤導致語法錯。</li>
<li>無窮迴圈（如 while 條件永遠為真）。</li>
</ul>
</div>
<h4>四、進階建議與常見問題</h4>
<ul>
<li><strong>多加練習</strong>
<ul>
<li>完成 Reeborg 的所有世界（關卡）。</li>
<li>嘗試設計自己的世界與題目。</li>
</ul>
</li>
<li><strong>閱讀程式碼，互相學習</strong>
<ul>
<li>觀摩別人解法，了解不同邏輯。</li>
<li>勇於提問與討論（如參加線上社群）。</li>
</ul>
</li>
<li><strong>養成良好習慣</strong>
<ul>
<li>適當註解，提高可讀性。</li>
<li>命名有意義的變數與函式。</li>
</ul>
</li>
</ul>
<h4>五、完整學習流程小結</h4>
<ol>
<li>學會 Python 基本文法、邏輯思考。</li>
<li>熟練 Reeborg 指令、感測器、流程控制。</li>
<li>多練習、多觀察、多修正。</li>
<li>培養拆解問題、設計函式的能力。</li>
<li>主動探索更多應用與進階技巧。</li>
</ol>
<h2>Javascript</h2>
<h4>JavaScript 初學者完整學習指引</h4>
<h4>一、為什麼學 JavaScript？</h4>
<ul>
<li>JavaScript 是網頁開發必學語言，執行於所有主流瀏覽器。</li>
<li>可用於前端（瀏覽器）、後端（Node.js）、行動應用、桌面應用等。</li>
<li>社群大、資源多，學會 JS 等於打開 Web 世界大門。</li>
</ul>
<h4>二、學習流程建議</h4>
<ol>
<li>認識 JavaScript 應用場景及基礎語法。</li>
<li>熟悉開發與測試環境：<br/>推薦直接在 Chrome、Edge、Firefox 等瀏覽器按 F12 開啟「開發人員工具」→「主控台(Console)」練習。</li>
<li>循序漸進學習語法與邏輯：從變數、流程控制、函式、物件等開始。</li>
<li>多做練習題與小專案。</li>
<li>了解 DOM 操作、事件處理與基礎網頁互動。</li>
<li>進階可學習 ES6+ 新語法與框架（如 React、Vue）。</li>
</ol>
<h4>三、JavaScript 必學基礎語法與範例</h4>
<table>
<tbody>
<tr>
<th>語法主題</th>
<th>說明</th>
<th>範例</th>
</tr>
<tr>
<td>變數宣告</td>
<td>用 <code>let</code>、<code>const</code>（現代 JS），<br/>不要再用 <code>var</code>。</td>
<td><code>let x = 10;<br/>const pi = 3.14;</code></td>
</tr>
<tr>
<td>資料型態</td>
<td>數字（Number）、字串（String）、布林（Boolean）、陣列（Array）、物件（Object）、null、undefined</td>
<td><code> let s = "hi";<br/> let arr = [1,2,3];<br/> let person = { name: "Tom", age: 20 }; </code></td>
</tr>
<tr>
<td>輸出</td>
<td>用 <code>console.log()</code> 輸出到主控台</td>
<td><code>console.log("Hello!");<br/>console.log(x + 2);</code></td>
</tr>
<tr>
<td>運算子</td>
<td>數學（+、-、*、/、%）、比較（==、===、!=、!==、&gt;、&lt;）、邏輯（&amp;&amp;、||、!）</td>
<td><code> let z = x + 5;<br/> x === 10<br/> (a &gt; 0) &amp;&amp; (b &lt; 5) </code></td>
</tr>
<tr>
<td>條件判斷</td>
<td>if、else if、else</td>
<td><code> if (x &gt; 0) {<br/>   console.log("正數");<br/> } else {<br/>   console.log("非正數");<br/> } </code></td>
</tr>
<tr>
<td>迴圈</td>
<td>for、while、do...while</td>
<td><code> for (let i = 0; i &lt; 3; i++) {<br/>   console.log(i);<br/> }<br/> <br/> let count = 0;<br/> while (count &lt; 3) {<br/>   console.log(count);<br/>   count++;<br/> } </code></td>
</tr>
<tr>
<td>函式</td>
<td>定義與呼叫，<br/> ES6 支援箭頭函式</td>
<td><code> function greet(name) {<br/>   console.log("Hi, " + name);<br/> }<br/> greet("Amy");<br/> <br/> // 箭頭函式<br/> const add = (a, b) =&gt; a + b;<br/> console.log(add(2,3)); </code></td>
</tr>
<tr>
<td>陣列與物件</td>
<td>基本操作：存取元素、方法如 <code>push</code>、<code>forEach</code> 等</td>
<td><code> let nums = [1,2,3];<br/> nums.push(4);<br/> nums.forEach(item =&gt; console.log(item));<br/> <br/> let person = { name: "Tom", age: 20 };<br/> console.log(person.name); </code></td>
</tr>
<tr>
<td>註解</td>
<td>單行 <code>//</code>，多行 <code>/* */</code></td>
<td><code> // 這是單行註解<br/> /*<br/> 這是多行註解<br/> */ </code></td>
</tr>
</tbody>
</table>
<div class="tip"><strong>小提醒：</strong> JavaScript 語法彈性大，但容易出現隱含錯誤，建議使用嚴格模式 <code>'use strict';</code>，養成良好命名與註解習慣。</div>
<h4>四、在網頁上的應用簡介</h4>
<ul>
<li>JavaScript 主要用於網頁互動、動態內容與事件處理。</li>
<li>可透過 <code>&lt;script&gt;</code> 標籤直接在 HTML 內嵌或引用外部 JS 檔案：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;JS 範例&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;button onclick="sayHello()"&gt;點我&lt;/button&gt;
  &lt;script&gt;
    function sayHello() {
      alert("你好！");
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<h4>五、常見錯誤與學習建議</h4>
<ul>
<li><strong>常見錯誤：</strong>
<ul>
<li>少分號或括號（雖然 JS 支援自動補全，但還是建議加上）。</li>
<li>變數未宣告直接使用。</li>
<li>區分 <code>==</code>（寬鬆相等）與 <code>===</code>（嚴格相等）。</li>
<li>陣列與物件存取語法錯誤。</li>
</ul>
</li>
<li><strong>學習建議：</strong>
<ul>
<li>多練習：在主控台嘗試各種語法。</li>
<li>閱讀 MDN（Mozilla Developer Network）文件，查詢 JS 語法與用法。</li>
<li>完成小專案，如計算機、Todo List、網頁互動等。</li>
<li>多與他人討論，參加線上社群。</li>
</ul>
</li>
</ul>
<h4>六、進階主題（可視情況逐步學習）</h4>
<ul>
<li>ES6+ 新語法（let、const、箭頭函式、解構賦值、展開運算子、模組化等）</li>
<li>事件處理、DOM 操作與網頁互動</li>
<li>非同步程式（callback、Promise、async/await）</li>
<li>物件導向程式設計、類別（class）</li>
<li>前端框架（如 React、Vue、Angular）</li>
<li>Node.js 伺服器端開發</li>
</ul>
<h3>HTML and CSS</h3>
<h4>HTML &amp; CSS 初學者學習指南</h4>
<h4>一、HTML 與 CSS 是什麼？</h4>
<ul>
<li><strong>HTML（超文件標記語言）</strong>：負責「網頁內容」與「結構」的描述，是網頁的骨架。</li>
<li><strong>CSS（層疊樣式表）</strong>：負責「網頁外觀、樣式、版面」的設計，是網頁的皮膚與裝飾。</li>
<li>兩者配合，讓你能打造美觀、結構良好的網站。</li>
</ul>
<h4>二、學習步驟建議</h4>
<ol>
<li>了解 HTML 與 CSS 各自用途與基本概念。</li>
<li>從基礎標籤（如 <code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;img&gt;</code>）與基本樣式（如顏色、字體、邊距）學起。</li>
<li>邊學邊練習：可用 <a href="https://codepen.io/" target="_blank">CodePen</a>、<a href="https://jsfiddle.net/" target="_blank">JSFiddle</a>、本地文字編輯器練習。</li>
<li>模仿簡單網頁，了解版型與排版原理。</li>
<li>逐步學習表格、表單、版面配置（如 Flexbox、Grid）。</li>
<li>挑戰自製個人履歷網頁、作品集、Landing Page 等小專案。</li>
</ol>
<h4>三、HTML 必學標籤與語法</h4>
<table>
<tbody>
<tr>
<th>標籤</th>
<th>用途</th>
<th>範例</th>
</tr>
<tr>
<td><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></td>
<td>標題（h1 最大）</td>
<td><code>&lt;h1&gt;主標題&lt;/h1&gt;</code></td>
</tr>
<tr>
<td><code>&lt;p&gt;</code></td>
<td>段落文字</td>
<td><code>&lt;p&gt;這是一段文字。&lt;/p&gt;</code></td>
</tr>
<tr>
<td><code>&lt;a&gt;</code></td>
<td>超連結</td>
<td><code>&lt;a href="https://google.com"&gt;Google&lt;/a&gt;</code></td>
</tr>
<tr>
<td><code>&lt;img&gt;</code></td>
<td>插入圖片</td>
<td><code>&lt;img src="cat.jpg" alt="貓咪"&gt;</code></td>
</tr>
<tr>
<td><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code></td>
<td>無序/有序清單</td>
<td><code> &lt;ul&gt;<br/>   &lt;li&gt;項目1&lt;/li&gt;<br/>   &lt;li&gt;項目2&lt;/li&gt;<br/> &lt;/ul&gt; </code></td>
</tr>
<tr>
<td><code>&lt;div&gt;</code> / <code>&lt;span&gt;</code></td>
<td>區塊/行內分組、CSS 樣式輔助</td>
<td><code>&lt;div class="box"&gt;內容&lt;/div&gt;</code></td>
</tr>
<tr>
<td><code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code></td>
<td>表格</td>
<td><code> &lt;table&gt;<br/>   &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;<br/> &lt;/table&gt; </code></td>
</tr>
<tr>
<td><code>&lt;form&gt;</code>、<code>&lt;input&gt;</code></td>
<td>表單與輸入欄位</td>
<td><code> &lt;form&gt;<br/>   &lt;input type="text" placeholder="姓名"&gt;<br/> &lt;/form&gt; </code></td>
</tr>
</tbody>
</table>
<h4>四、CSS 必學語法與範例</h4>
<ul>
<li>基本選擇器：<code>元素</code>、<code>.類別</code>、<code>#ID</code></li>
<li>常用屬性：<code>color</code>（文字顏色）、<code>background</code>（背景）、<code>font-size</code>、<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>、<code>border</code></li>
<li>文字對齊（<code>text-align</code>）、區塊對齊（<code>display</code>、<code>flex</code>、<code>grid</code>）</li>
<li>CSS 寫法可在 <code>&lt;style&gt;</code> 標籤、<code>style</code> 屬性或獨立 .css 檔案</li>
</ul>
<pre><code>
/* 樣式檔範例 */
h1 {
    color: #2d7f5e;
    font-size: 2em;
    text-align: center;
}
.box {
    background: #eaffea;
    padding: 1em;
    border-radius: 8px;
    margin-bottom: 1em;
}
#main {
    width: 80%;
    margin: auto;
}
        </code></pre>
<div class="tip"><strong>小技巧：</strong>
<ul>
<li>多善用瀏覽器「檢查元素」功能，調整 CSS 效果。</li>
<li>CSS 有「繼承」與「選擇器優先權」概念，遇到樣式衝突時要注意。</li>
</ul>
</div>
<h4>五、常見練習與專案</h4>
<ul>
<li>練習製作個人履歷網頁、名片網站、簡單 Landing Page。</li>
<li>模仿喜歡的網站版型，重新切版練習。</li>
<li>挑戰 CSS Flexbox、Grid 排版。</li>
<li>試著設計表單、導航列、圖文混排區塊。</li>
</ul>
<h4>六、常見錯誤與學習建議</h4>
<div class="warning"><strong>常見錯誤：</strong>
<ul>
<li>HTML 標籤忘記閉合、層級錯誤。</li>
<li>CSS 拼字錯誤、屬性寫錯或分號遺漏。</li>
<li>選擇器優先權搞混，導致樣式沒套用。</li>
<li>class 與 id 用法混淆。</li>
</ul>
</div>
<ul>
<li>多手寫、多練習，熟悉標籤與屬性。</li>
<li>常用 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML" target="_blank">MDN Web Docs</a> 查詢 HTML/CSS 語法。</li>
<li>參加線上挑戰如 <a href="https://www.frontendmentor.io/" target="_blank">Frontend Mentor</a>、<a href="https://cssbattle.dev/" target="_blank">CSS Battle</a>。</li>
</ul>
<h4>七、進階主題推薦</h4>
<ul>
<li>RWD 響應式網頁設計（media query）</li>
<li>CSS 動畫與過渡（animation, transition）</li>
<li>SCSS/SASS 等 CSS 預處理器</li>
<li>Bootstrap、Tailwind CSS 等框架</li>
<li>網頁無障礙（a11y）設計</li>
</ul>
<h1>Reeborg</h1>
<p><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py</a></p>
<p><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_east_west.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_east_west.py</a> </p>
<hr/>
<p><a href="https://mde.tw/reeborg">https://mde.tw/reeborg</a></p>
<p><a href="https://github.com/mdecycu/cs101">https://github.com/mdecycu/cs101</a></p>
<p><a href="https://reeborg.ca/docs/en/python/index.html">https://reeborg.ca/docs/en/python/index.html</a></p>
<p><a href="https://aroberge.github.io/reeborg-api/">https://aroberge.github.io/reeborg-api/</a></p>
<p>if using local static port 9442:</p>
<p style="padding-left: 30px;"><a href="https://127.0.0.1:8442/reeborg/?lang=en&amp;mode=python&amp;menu=%2Freeborg%2Fworlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=%2Freeborg%2Fworlds%2Ftutorial_en%2Fharvest1.json&amp;editor=%2Freeborg%2Fpython%2Fharvest1.py">Reeborg</a></p>
<p>For Github Pages:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=%2Freeborg%2Fworlds%2Fmenus%2Fselect_collection_en.json&amp;name=Alone&amp;url=%2Freeborg%2Fworlds%2Ftutorial_en%2Fharvest1.json&amp;editor=%2Freeborg%2Fpython%2Fharvest1.py">Reeborg</a></p>
<p></p>
<h2>ex1</h2>
<p><a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1.py</a> 是已知的機器人採收紅蘿蔔的程式，經由以下與 Copilot 的對話，希望透過 Python Class 的編寫解決特定範圍農作物採收的程式。</p>
<p>問句:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">以下是 Reeborg 一個用來採收紅蘿蔔的程式, 目前位於 (3,3) 到 (8,8) 的區域中各座標點, 各有一個紅羅蔔等待採收, 現在想要建立一個 harvest() class, 可以利用 (3,3), (8,8)作為標定有農作物必須採收的兩個區域對角點座標, 而程式可以利用此一 harvest 類別生成案例完成採收的任務: def turn(int):
    for i in range(int):
        turn_left()
        
def new_move(int):
    for i in range(int):
        move()
        
def harvest_one_row():
    while object_here():
        take()
    else:
        move()
# move to the field
new_move(2)
turn_left()
new_move(2)

for i in range(3):
    while is_facing_north():
        for i in range(6):
            harvest_one_row()
        for i in range(2):
            turn(3)
            move() 
    else:
        for i in range(6):
            harvest_one_row()
        for i in range(2):
            turn_left()
            move()</pre>
<p>AI 回答: <a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex1.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex1.py</a> </p>
<p>進一步要求:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">請在類別中加上一個採收方向的參數, 內建變數是 horizontal 採收, 也就是由西邊往東邊的水平方向進行採收, 但若該方向變數設為 vertical 則會由南邊往北的所謂垂直方向進行採收</pre>
<p>AI 回應: <a href="https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex2.py">https://mde.tw/cp2025/reeborg?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest1.json&amp;editor=python/harvest1_class_ex2.py </a> </p>
<p>延伸到採收 harvest2 農田: <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest2.json&amp;editor=python/harvest1_class_ex1.py">https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest2.json&amp;editor=python/harvest1_class_ex1.py</a> </p>
<p>但卻沒能套用到 harvest3 農田: <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex1.py">https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex1.py</a> </p>
<p>而必須要在每一個座標點留下或放入一個紅蘿蔔: <a href="https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex3.py">https://mde.tw/cp2025/reeborg/?lang=en&amp;mode=python&amp;menu=worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=worlds/tutorial_en/harvest3.json&amp;editor=python/harvest1_class_ex3.py </a> </p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p></div>